
Photonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009bd4  08009bd4  0000abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08009c30  08009c30  0000ac30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000104  24000000  08009c34  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c8c  24000104  08009d38  0000b104  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001d90  08009d38  0000bd90  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015acf  00000000  00000000  0000b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000036f7  00000000  00000000  00020c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001098  00000000  00000000  000242f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c5f  00000000  00000000  00025390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034a27  00000000  00000000  00025fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000164b3  00000000  00000000  0005aa16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001418f6  00000000  00000000  00070ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b27bf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004374  00000000  00000000  001b2804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005b  00000000  00000000  001b6b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000104 	.word	0x24000104
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009bbc 	.word	0x08009bbc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000108 	.word	0x24000108
 8000308:	08009bbc 	.word	0x08009bbc

0800030c <write_to_dac>:
 GPIOA->BSRR = DAC_CS2_PIN_HIGH;
 GPIOA->BSRR = DAC_CS3_PIN_HIGH;

}

void write_to_dac(uint8_t dac_num, uint8_t channel, uint16_t voltage) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
 8000316:	460b      	mov	r3, r1
 8000318:	71bb      	strb	r3, [r7, #6]
 800031a:	4613      	mov	r3, r2
 800031c:	80bb      	strh	r3, [r7, #4]
	uint8_t tx_array[3];
	//set the DAC low, ready for comm
	GPIOA->BSRR = (1 << (16 + (dac_num-1)));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	330f      	adds	r3, #15
 8000322:	2201      	movs	r2, #1
 8000324:	409a      	lsls	r2, r3
 8000326:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <write_to_dac+0x5c>)
 8000328:	619a      	str	r2, [r3, #24]

	tx_array[0] = (channel & 0x0F);
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	f003 030f 	and.w	r3, r3, #15
 8000330:	b2db      	uxtb	r3, r3
 8000332:	733b      	strb	r3, [r7, #12]

	tx_array[1] = (voltage >> 8);
 8000334:	88bb      	ldrh	r3, [r7, #4]
 8000336:	0a1b      	lsrs	r3, r3, #8
 8000338:	b29b      	uxth	r3, r3
 800033a:	b2db      	uxtb	r3, r3
 800033c:	737b      	strb	r3, [r7, #13]

	tx_array[2] = (voltage & 0xFF);
 800033e:	88bb      	ldrh	r3, [r7, #4]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi5, tx_array, 3, HAL_MAX_DELAY);
 8000344:	f107 010c 	add.w	r1, r7, #12
 8000348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800034c:	2203      	movs	r2, #3
 800034e:	4807      	ldr	r0, [pc, #28]	@ (800036c <write_to_dac+0x60>)
 8000350:	f004 fdcc 	bl	8004eec <HAL_SPI_Transmit>

	GPIOA->BSRR = (1 << ((dac_num-1)));
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	3b01      	subs	r3, #1
 8000358:	2201      	movs	r2, #1
 800035a:	409a      	lsls	r2, r3
 800035c:	4b02      	ldr	r3, [pc, #8]	@ (8000368 <write_to_dac+0x5c>)
 800035e:	619a      	str	r2, [r3, #24]

}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	58020000 	.word	0x58020000
 800036c:	24000120 	.word	0x24000120

08000370 <read_dac>:

uint16_t read_dac(uint8_t dac_num, uint8_t channel) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af02      	add	r7, sp, #8
 8000376:	4603      	mov	r3, r0
 8000378:	460a      	mov	r2, r1
 800037a:	71fb      	strb	r3, [r7, #7]
 800037c:	4613      	mov	r3, r2
 800037e:	71bb      	strb	r3, [r7, #6]



	GPIOA->BSRR = (1 << (16 + (dac_num-1)));
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	330f      	adds	r3, #15
 8000384:	2201      	movs	r2, #1
 8000386:	409a      	lsls	r2, r3
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <read_dac+0x7c>)
 800038a:	619a      	str	r2, [r3, #24]

	uint8_t read_array[3] = {0x00, 0x00, 0x00};
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	2100      	movs	r1, #0
 8000392:	460a      	mov	r2, r1
 8000394:	801a      	strh	r2, [r3, #0]
 8000396:	460a      	mov	r2, r1
 8000398:	709a      	strb	r2, [r3, #2]
	read_array[0] = 0x80 | (channel & 0x0F);
 800039a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800039e:	f003 030f 	and.w	r3, r3, #15
 80003a2:	b25b      	sxtb	r3, r3
 80003a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	743b      	strb	r3, [r7, #16]

	uint8_t rx_buffer[3];


	HAL_SPI_TransmitReceive(&hspi5, read_array, rx_buffer, 3, HAL_MAX_DELAY);
 80003ae:	f107 020c 	add.w	r2, r7, #12
 80003b2:	f107 0110 	add.w	r1, r7, #16
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2303      	movs	r3, #3
 80003be:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <read_dac+0x80>)
 80003c0:	f004 ff82 	bl	80052c8 <HAL_SPI_TransmitReceive>

	uint16_t channel_voltage = (rx_buffer[1] << 8) | rx_buffer[2];
 80003c4:	7b7b      	ldrb	r3, [r7, #13]
 80003c6:	b21b      	sxth	r3, r3
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	b21a      	sxth	r2, r3
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	82fb      	strh	r3, [r7, #22]

	GPIOA->BSRR = (1 << ((dac_num-1)));
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	3b01      	subs	r3, #1
 80003da:	2201      	movs	r2, #1
 80003dc:	409a      	lsls	r2, r3
 80003de:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <read_dac+0x7c>)
 80003e0:	619a      	str	r2, [r3, #24]

	return channel_voltage;
 80003e2:	8afb      	ldrh	r3, [r7, #22]


}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	58020000 	.word	0x58020000
 80003f0:	24000120 	.word	0x24000120

080003f4 <volts_to_dac_value>:

uint16_t volts_to_dac_value(uint16_t voltage_mv) {
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	80fb      	strh	r3, [r7, #6]
    uint16_t vref_mv = 5000;
 80003fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000402:	81fb      	strh	r3, [r7, #14]
    if (voltage_mv > vref_mv) voltage_mv = vref_mv;
 8000404:	88fa      	ldrh	r2, [r7, #6]
 8000406:	89fb      	ldrh	r3, [r7, #14]
 8000408:	429a      	cmp	r2, r3
 800040a:	d901      	bls.n	8000410 <volts_to_dac_value+0x1c>
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)(((uint32_t)voltage_mv * 65535) / vref_mv);
 8000410:	88fa      	ldrh	r2, [r7, #6]
 8000412:	4613      	mov	r3, r2
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	1a9a      	subs	r2, r3, r2
 8000418:	89fb      	ldrh	r3, [r7, #14]
 800041a:	fbb2 f3f3 	udiv	r3, r2, r3
 800041e:	b29b      	uxth	r3, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000432:	f000 f937 	bl	80006a4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000436:	f000 faf7 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043a:	f000 f81f 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043e:	f000 f8d3 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000442:	f008 fe79 	bl	8009138 <MX_USB_DEVICE_Init>
  MX_SPI5_Init();
 8000446:	f000 f877 	bl	8000538 <MX_SPI5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

uint16_t voltage_mv = 1943;
 800044a:	f240 7397 	movw	r3, #1943	@ 0x797
 800044e:	80fb      	strh	r3, [r7, #6]

uint16_t voltage_dac = volts_to_dac_value(voltage_mv);
 8000450:	88fb      	ldrh	r3, [r7, #6]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ffce 	bl	80003f4 <volts_to_dac_value>
 8000458:	4603      	mov	r3, r0
 800045a:	80bb      	strh	r3, [r7, #4]


write_to_dac(1, channel_0, voltage_dac);
 800045c:	88bb      	ldrh	r3, [r7, #4]
 800045e:	461a      	mov	r2, r3
 8000460:	2108      	movs	r1, #8
 8000462:	2001      	movs	r0, #1
 8000464:	f7ff ff52 	bl	800030c <write_to_dac>
uint16_t voltage_read = read_dac(1, channel_0);
 8000468:	2108      	movs	r1, #8
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff ff80 	bl	8000370 <read_dac>
 8000470:	4603      	mov	r3, r0
 8000472:	807b      	strh	r3, [r7, #2]

uint8_t test = 8;
 8000474:	2308      	movs	r3, #8
 8000476:	707b      	strb	r3, [r7, #1]



  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <main+0x4c>

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b09c      	sub	sp, #112	@ 0x70
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000486:	224c      	movs	r2, #76	@ 0x4c
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f009 fb6a 	bl	8009b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2220      	movs	r2, #32
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f009 fb64 	bl	8009b64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800049c:	2002      	movs	r0, #2
 800049e:	f002 f979 	bl	8002794 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	4b23      	ldr	r3, [pc, #140]	@ (8000534 <SystemClock_Config+0xb8>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004ae:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <SystemClock_Config+0xb8>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000534 <SystemClock_Config+0xb8>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c2:	bf00      	nop
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <SystemClock_Config+0xb8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d1f8      	bne.n	80004c4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004d2:	2321      	movs	r3, #33	@ 0x21
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004d6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004dc:	2301      	movs	r3, #1
 80004de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 f99d 	bl	8002828 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004f4:	f000 f902 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	233f      	movs	r3, #63	@ 0x3f
 80004fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80004fc:	2302      	movs	r3, #2
 80004fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800050c:	2340      	movs	r3, #64	@ 0x40
 800050e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2101      	movs	r1, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fd5d 	bl	8002fdc <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000528:	f000 f8e8 	bl	80006fc <Error_Handler>
  }
}
 800052c:	bf00      	nop
 800052e:	3770      	adds	r7, #112	@ 0x70
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	58024800 	.word	0x58024800

08000538 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800053c:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800053e:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <MX_SPI5_Init+0xac>)
 8000540:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000542:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000544:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000548:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800054a:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000550:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000552:	2207      	movs	r2, #7
 8000554:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800055c:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800055e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000562:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000564:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000566:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800056a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800056e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000572:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000576:	2200      	movs	r2, #0
 8000578:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800057c:	2200      	movs	r2, #0
 800057e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000582:	2200      	movs	r2, #0
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000588:	2200      	movs	r2, #0
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800058e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 8000596:	2200      	movs	r2, #0
 8000598:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80005be:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <MX_SPI5_Init+0xa8>)
 80005cc:	f004 fb6a 	bl	8004ca4 <HAL_SPI_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_SPI5_Init+0xa2>
  {
    Error_Handler();
 80005d6:	f000 f891 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	24000120 	.word	0x24000120
 80005e4:	40015000 	.word	0x40015000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b27      	ldr	r3, [pc, #156]	@ (800069c <MX_GPIO_Init+0xb4>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	4a25      	ldr	r2, [pc, #148]	@ (800069c <MX_GPIO_Init+0xb4>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_GPIO_Init+0xb4>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_GPIO_Init+0xb4>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <MX_GPIO_Init+0xb4>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_GPIO_Init+0xb4>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_GPIO_Init+0xb4>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <MX_GPIO_Init+0xb4>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_GPIO_Init+0xb4>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2107      	movs	r1, #7
 800065c:	4810      	ldr	r0, [pc, #64]	@ (80006a0 <MX_GPIO_Init+0xb8>)
 800065e:	f000 fddf 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000662:	2307      	movs	r3, #7
 8000664:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <MX_GPIO_Init+0xb8>)
 800067a:	f000 fc29 	bl	8000ed0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_CLOSE);
 800067e:	2100      	movs	r1, #0
 8000680:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000684:	f000 fa86 	bl	8000b94 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_CLOSE);
 8000688:	2100      	movs	r1, #0
 800068a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 800068e:	f000 fa81 	bl	8000b94 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	58024400 	.word	0x58024400
 80006a0:	58020000 	.word	0x58020000

080006a4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006b6:	f000 fb93 	bl	8000de0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006be:	2300      	movs	r3, #0
 80006c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006c6:	231f      	movs	r3, #31
 80006c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006ca:	2387      	movs	r3, #135	@ 0x87
 80006cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006d2:	2300      	movs	r3, #0
 80006d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006e6:	463b      	mov	r3, r7
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fbb1 	bl	8000e50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80006ee:	2004      	movs	r0, #4
 80006f0:	f000 fb8e 	bl	8000e10 <HAL_MPU_Enable>

}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_MspInit+0x30>)
 8000710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000714:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x30>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x30>)
 8000720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	58024400 	.word	0x58024400

0800073c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b8      	sub	sp, #224	@ 0xe0
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	22b8      	movs	r2, #184	@ 0xb8
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fa01 	bl	8009b64 <memset>
  if(hspi->Instance==SPI5)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <HAL_SPI_MspInit+0xc4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d145      	bne.n	80007f8 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800076c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000778:	2300      	movs	r3, #0
 800077a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f002 ff8b 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800078c:	f7ff ffb6 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000790:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 8000792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000796:	4a1b      	ldr	r2, [pc, #108]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 8000798:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800079c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 80007a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80007a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <HAL_SPI_MspInit+0xc8>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80007cc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80007d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007e6:	2305      	movs	r3, #5
 80007e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <HAL_SPI_MspInit+0xcc>)
 80007f4:	f000 fb6c 	bl	8000ed0 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80007f8:	bf00      	nop
 80007fa:	37e0      	adds	r7, #224	@ 0xe0
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40015000 	.word	0x40015000
 8000804:	58024400 	.word	0x58024400
 8000808:	58021400 	.word	0x58021400

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <NMI_Handler+0x4>

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <UsageFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f953 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <OTG_HS_IRQHandler+0x10>)
 8000872:	f000 fe2f 	bl	80014d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2400168c 	.word	0x2400168c

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000884:	4b3e      	ldr	r3, [pc, #248]	@ (8000980 <SystemInit+0x100>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <SystemInit+0x100>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000894:	4b3b      	ldr	r3, [pc, #236]	@ (8000984 <SystemInit+0x104>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 030f 	and.w	r3, r3, #15
 800089c:	2b06      	cmp	r3, #6
 800089e:	d807      	bhi.n	80008b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008a0:	4b38      	ldr	r3, [pc, #224]	@ (8000984 <SystemInit+0x104>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 030f 	bic.w	r3, r3, #15
 80008a8:	4a36      	ldr	r2, [pc, #216]	@ (8000984 <SystemInit+0x104>)
 80008aa:	f043 0307 	orr.w	r3, r3, #7
 80008ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008b0:	4b35      	ldr	r3, [pc, #212]	@ (8000988 <SystemInit+0x108>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a34      	ldr	r2, [pc, #208]	@ (8000988 <SystemInit+0x108>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008bc:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <SystemInit+0x108>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <SystemInit+0x108>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4930      	ldr	r1, [pc, #192]	@ (8000988 <SystemInit+0x108>)
 80008c8:	4b30      	ldr	r3, [pc, #192]	@ (800098c <SystemInit+0x10c>)
 80008ca:	4013      	ands	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000984 <SystemInit+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <SystemInit+0x104>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <SystemInit+0x104>)
 80008e4:	f043 0307 	orr.w	r3, r3, #7
 80008e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008ea:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <SystemInit+0x108>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemInit+0x108>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <SystemInit+0x108>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SystemInit+0x108>)
 80008fe:	4a24      	ldr	r2, [pc, #144]	@ (8000990 <SystemInit+0x110>)
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <SystemInit+0x108>)
 8000904:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <SystemInit+0x114>)
 8000906:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <SystemInit+0x108>)
 800090a:	4a23      	ldr	r2, [pc, #140]	@ (8000998 <SystemInit+0x118>)
 800090c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <SystemInit+0x108>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <SystemInit+0x108>)
 8000916:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <SystemInit+0x118>)
 8000918:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <SystemInit+0x108>)
 800091c:	2200      	movs	r2, #0
 800091e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <SystemInit+0x108>)
 8000922:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <SystemInit+0x118>)
 8000924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <SystemInit+0x108>)
 8000928:	2200      	movs	r2, #0
 800092a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <SystemInit+0x108>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a15      	ldr	r2, [pc, #84]	@ (8000988 <SystemInit+0x108>)
 8000932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <SystemInit+0x108>)
 800093a:	2200      	movs	r2, #0
 800093c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <SystemInit+0x108>)
 8000940:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d113      	bne.n	8000974 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <SystemInit+0x108>)
 800094e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000952:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <SystemInit+0x108>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000958:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <SystemInit+0x11c>)
 800095e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000962:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <SystemInit+0x108>)
 8000966:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800096a:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <SystemInit+0x108>)
 800096c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000970:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	52002000 	.word	0x52002000
 8000988:	58024400 	.word	0x58024400
 800098c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000990:	02020200 	.word	0x02020200
 8000994:	01ff0000 	.word	0x01ff0000
 8000998:	01010280 	.word	0x01010280
 800099c:	52004000 	.word	0x52004000

080009a0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <ExitRun0Mode+0x2c>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <ExitRun0Mode+0x2c>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009b0:	bf00      	nop
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <ExitRun0Mode+0x2c>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f9      	beq.n	80009b2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	58024800 	.word	0x58024800

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 80009d0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a0c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009d4:	f7ff ffe4 	bl	80009a0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d8:	f7ff ff52 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f009 f8b7 	bl	8009b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fd11 	bl	800042c <main>
  bx  lr
 8000a0a:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8000a0c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000a10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a14:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8000a18:	08009c34 	.word	0x08009c34
  ldr r2, =_sbss
 8000a1c:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8000a20:	24001d90 	.word	0x24001d90

08000a24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC3_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f000 f996 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a34:	f002 fc88 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_Init+0x68>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	4913      	ldr	r1, [pc, #76]	@ (8000a94 <HAL_Init+0x6c>)
 8000a46:	5ccb      	ldrb	r3, [r1, r3]
 8000a48:	f003 031f 	and.w	r3, r3, #31
 8000a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_Init+0x68>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <HAL_Init+0x6c>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	f003 031f 	and.w	r3, r3, #31
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	fa22 f303 	lsr.w	r3, r2, r3
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_Init+0x70>)
 8000a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <HAL_Init+0x74>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f814 	bl	8000aa0 <HAL_InitTick>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e002      	b.n	8000a88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a82:	f7ff fe41 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58024400 	.word	0x58024400
 8000a94:	08009c1c 	.word	0x08009c1c
 8000a98:	24000004 	.word	0x24000004
 8000a9c:	24000000 	.word	0x24000000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_InitTick+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d101      	bne.n	8000ab4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e021      	b.n	8000af8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_InitTick+0x64>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_InitTick+0x60>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f97b 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae8:	f000 f945 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <HAL_InitTick+0x68>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2400000c 	.word	0x2400000c
 8000b04:	24000000 	.word	0x24000000
 8000b08:	24000008 	.word	0x24000008

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2400000c 	.word	0x2400000c
 8000b30:	240001a8 	.word	0x240001a8

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	240001a8 	.word	0x240001a8

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400000c 	.word	0x2400000c

08000b94 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	4904      	ldr	r1, [pc, #16]	@ (8000bbc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	58000400 	.word	0x58000400

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x40>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	05fa0000 	.word	0x05fa0000

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	@ (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	@ (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	@ 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	@ 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff29 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff40 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff90 	bl	8000cb4 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5f 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff33 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa4 	bl	8000d1c <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000de4:	f3bf 8f5f 	dmb	sy
}
 8000de8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dea:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <HAL_MPU_Disable+0x28>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dee:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_MPU_Disable+0x28>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_MPU_Disable+0x2c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	e000ed90 	.word	0xe000ed90

08000e10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <HAL_MPU_Enable+0x38>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_MPU_Enable+0x3c>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e26:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <HAL_MPU_Enable+0x3c>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e2e:	f3bf 8f4f 	dsb	sy
}
 8000e32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e34:	f3bf 8f6f 	isb	sy
}
 8000e38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed90 	.word	0xe000ed90
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	785a      	ldrb	r2, [r3, #1]
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <HAL_MPU_ConfigRegion+0x7c>)
 8000e5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_MPU_ConfigRegion+0x7c>)
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_MPU_ConfigRegion+0x7c>)
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_MPU_ConfigRegion+0x7c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7b1b      	ldrb	r3, [r3, #12]
 8000e78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7adb      	ldrb	r3, [r3, #11]
 8000e7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a9b      	ldrb	r3, [r3, #10]
 8000e86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b5b      	ldrb	r3, [r3, #13]
 8000e8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7b9b      	ldrb	r3, [r3, #14]
 8000e96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7bdb      	ldrb	r3, [r3, #15]
 8000e9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ea0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ea8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7a1b      	ldrb	r3, [r3, #8]
 8000eae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000eb0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000eb8:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ebc:	6113      	str	r3, [r2, #16]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed90 	.word	0xe000ed90

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ede:	4b86      	ldr	r3, [pc, #536]	@ (80010f8 <HAL_GPIO_Init+0x228>)
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee2:	e18c      	b.n	80011fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 817e 	beq.w	80011f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x44>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	69b9      	ldr	r1, [r7, #24]
 8001002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0203 	and.w	r2, r3, #3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80d8 	beq.w	80011f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b2c      	ldr	r3, [pc, #176]	@ (80010fc <HAL_GPIO_Init+0x22c>)
 800104a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104e:	4a2b      	ldr	r2, [pc, #172]	@ (80010fc <HAL_GPIO_Init+0x22c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_GPIO_Init+0x22c>)
 800105a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <HAL_GPIO_Init+0x230>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_GPIO_Init+0x234>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d04a      	beq.n	8001128 <HAL_GPIO_Init+0x258>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <HAL_GPIO_Init+0x238>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x222>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <HAL_GPIO_Init+0x23c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x21e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <HAL_GPIO_Init+0x240>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <HAL_GPIO_Init+0x244>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <HAL_GPIO_Init+0x248>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a17      	ldr	r2, [pc, #92]	@ (800111c <HAL_GPIO_Init+0x24c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a16      	ldr	r2, [pc, #88]	@ (8001120 <HAL_GPIO_Init+0x250>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a15      	ldr	r2, [pc, #84]	@ (8001124 <HAL_GPIO_Init+0x254>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x206>
 80010d2:	2309      	movs	r3, #9
 80010d4:	e029      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010d6:	230a      	movs	r3, #10
 80010d8:	e027      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e025      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010de:	2306      	movs	r3, #6
 80010e0:	e023      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e021      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e01f      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e01d      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e01b      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e019      	b.n	800112a <HAL_GPIO_Init+0x25a>
 80010f6:	bf00      	nop
 80010f8:	58000080 	.word	0x58000080
 80010fc:	58024400 	.word	0x58024400
 8001100:	58000400 	.word	0x58000400
 8001104:	58020000 	.word	0x58020000
 8001108:	58020400 	.word	0x58020400
 800110c:	58020800 	.word	0x58020800
 8001110:	58020c00 	.word	0x58020c00
 8001114:	58021000 	.word	0x58021000
 8001118:	58021400 	.word	0x58021400
 800111c:	58021800 	.word	0x58021800
 8001120:	58021c00 	.word	0x58021c00
 8001124:	58022400 	.word	0x58022400
 8001128:	2300      	movs	r3, #0
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113a:	4938      	ldr	r1, [pc, #224]	@ (800121c <HAL_GPIO_Init+0x34c>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800116e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800119c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3301      	adds	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f ae6b 	bne.w	8000ee4 <HAL_GPIO_Init+0x14>
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3724      	adds	r7, #36	@ 0x24
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	58000400 	.word	0x58000400

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af02      	add	r7, sp, #8
 8001258:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0fe      	b.n	8001462 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f008 f93f 	bl	80094fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fd65 	bl	8005d5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7c1a      	ldrb	r2, [r3, #16]
 8001298:	f88d 2000 	strb.w	r2, [sp]
 800129c:	3304      	adds	r3, #4
 800129e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a0:	f004 fc36 	bl	8005b10 <USB_CoreInit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0d5      	b.n	8001462 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fd5d 	bl	8005d7c <USB_SetCurrentMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e0c6      	b.n	8001462 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e04a      	b.n	8001370 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3315      	adds	r3, #21
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3314      	adds	r3, #20
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	b298      	uxth	r0, r3
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	332e      	adds	r3, #46	@ 0x2e
 8001316:	4602      	mov	r2, r0
 8001318:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131a:	7bfa      	ldrb	r2, [r7, #15]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	440b      	add	r3, r1
 8001328:	3318      	adds	r3, #24
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	331c      	adds	r3, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	3320      	adds	r3, #32
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	3324      	adds	r3, #36	@ 0x24
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	3301      	adds	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3af      	bcc.n	80012da <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
 800137e:	e044      	b.n	800140a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	3301      	adds	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	429a      	cmp	r2, r3
 8001412:	d3b5      	bcc.n	8001380 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7c1a      	ldrb	r2, [r3, #16]
 800141c:	f88d 2000 	strb.w	r2, [sp]
 8001420:	3304      	adds	r3, #4
 8001422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001424:	f004 fcf6 	bl	8005e14 <USB_DevInit>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e013      	b.n	8001462 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7b1b      	ldrb	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f001 f96f 	bl	8002734 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fd39 	bl	8006ed2 <USB_DevDisconnect>

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_PCD_Start+0x1c>
 8001482:	2302      	movs	r3, #2
 8001484:	e022      	b.n	80014cc <HAL_PCD_Start+0x62>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d105      	bne.n	80014ae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f004 fc40 	bl	8005d38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 fce7 	bl	8006e90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08d      	sub	sp, #52	@ 0x34
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f005 fda5 	bl	800703a <USB_GetMode>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 84b9 	bne.w	8001e6a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fd09 	bl	8006f14 <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 84af 	beq.w	8001e68 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fcf6 	bl	8006f14 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f002 0202 	and.w	r2, r2, #2
 8001540:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fce4 	bl	8006f14 <USB_ReadInterrupts>
 800154c:	4603      	mov	r3, r0
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b10      	cmp	r3, #16
 8001554:	d161      	bne.n	800161a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699a      	ldr	r2, [r3, #24]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0210 	bic.w	r2, r2, #16
 8001564:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f003 020f 	and.w	r2, r3, #15
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800158c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001590:	d124      	bne.n	80015dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d035      	beq.n	800160a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	6a38      	ldr	r0, [r7, #32]
 80015b2:	f005 fb1b 	bl	8006bec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	441a      	add	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d4:	441a      	add	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	e016      	b.n	800160a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80015e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80015e6:	d110      	bne.n	800160a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015ee:	2208      	movs	r2, #8
 80015f0:	4619      	mov	r1, r3
 80015f2:	6a38      	ldr	r0, [r7, #32]
 80015f4:	f005 fafa 	bl	8006bec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001604:	441a      	add	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0210 	orr.w	r2, r2, #16
 8001618:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f005 fc78 	bl	8006f14 <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800162e:	f040 80a7 	bne.w	8001780 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fc7d 	bl	8006f3a <USB_ReadDevAllOutEpInterrupt>
 8001640:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001642:	e099      	b.n	8001778 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 808e 	beq.w	800176c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fca1 	bl	8006fa2 <USB_ReadDevOutEPInterrupt>
 8001660:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001678:	461a      	mov	r2, r3
 800167a:	2301      	movs	r3, #1
 800167c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800167e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fed1 	bl	8002428 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00c      	beq.n	80016aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	015a      	lsls	r2, r3, #5
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800169c:	461a      	mov	r2, r3
 800169e:	2308      	movs	r3, #8
 80016a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 ffa7 	bl	80025f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016c0:	461a      	mov	r2, r3
 80016c2:	2310      	movs	r3, #16
 80016c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d030      	beq.n	8001732 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d8:	2b80      	cmp	r3, #128	@ 0x80
 80016da:	d109      	bne.n	80016f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80016f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	3304      	adds	r3, #4
 8001704:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	78db      	ldrb	r3, [r3, #3]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2200      	movs	r2, #0
 8001712:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f008 f80e 	bl	800973c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800172c:	461a      	mov	r2, r3
 800172e:	2302      	movs	r3, #2
 8001730:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001748:	461a      	mov	r2, r3
 800174a:	2320      	movs	r3, #32
 800174c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	015a      	lsls	r2, r3, #5
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	4413      	add	r3, r2
 8001760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001764:	461a      	mov	r2, r3
 8001766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177a:	2b00      	cmp	r3, #0
 800177c:	f47f af62 	bne.w	8001644 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fbc5 	bl	8006f14 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001794:	f040 80db 	bne.w	800194e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f005 fbe6 	bl	8006f6e <USB_ReadDevAllInEpInterrupt>
 80017a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80017a8:	e0cd      	b.n	8001946 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80c2 	beq.w	800193a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 fc0c 	bl	8006fde <USB_ReadDevInEPInterrupt>
 80017c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d057      	beq.n	8001882 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69f9      	ldr	r1, [r7, #28]
 80017ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80017f2:	4013      	ands	r3, r2
 80017f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001802:	461a      	mov	r2, r3
 8001804:	2301      	movs	r3, #1
 8001806:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	799b      	ldrb	r3, [r3, #6]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d132      	bne.n	8001876 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3320      	adds	r3, #32
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	331c      	adds	r3, #28
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4419      	add	r1, r3
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183a:	4613      	mov	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4403      	add	r3, r0
 8001844:	3320      	adds	r3, #32
 8001846:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	2b00      	cmp	r3, #0
 800184c:	d113      	bne.n	8001876 <HAL_PCD_IRQHandler+0x3a2>
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3324      	adds	r3, #36	@ 0x24
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800186e:	461a      	mov	r2, r3
 8001870:	2101      	movs	r1, #1
 8001872:	f005 fc15 	bl	80070a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f007 fed8 	bl	8009632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001898:	461a      	mov	r2, r3
 800189a:	2308      	movs	r3, #8
 800189c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018b4:	461a      	mov	r2, r3
 80018b6:	2310      	movs	r3, #16
 80018b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	015a      	lsls	r2, r3, #5
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018d0:	461a      	mov	r2, r3
 80018d2:	2340      	movs	r3, #64	@ 0x40
 80018d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018e2:	6a38      	ldr	r0, [r7, #32]
 80018e4:	f004 fbf4 	bl	80060d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80018e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	3310      	adds	r3, #16
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2200      	movs	r2, #0
 8001908:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f007 ff25 	bl	8009760 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001922:	461a      	mov	r2, r3
 8001924:	2302      	movs	r3, #2
 8001926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fcea 	bl	800230e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f af2e 	bne.w	80017aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fade 	bl	8006f14 <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800195e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001962:	d122      	bne.n	80019aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800198a:	2100      	movs	r1, #0
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fef5 	bl	800277c <HAL_PCDEx_LPM_Callback>
 8001992:	e002      	b.n	800199a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f007 fec3 	bl	8009720 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fab0 	bl	8006f14 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019be:	d112      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f007 fe7f 	bl	80096d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f005 fa92 	bl	8006f14 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019fa:	d121      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001a0a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d111      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a30:	2101      	movs	r1, #1
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 fea2 	bl	800277c <HAL_PCDEx_LPM_Callback>
 8001a38:	e002      	b.n	8001a40 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f007 fe4a 	bl	80096d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fa65 	bl	8006f14 <USB_ReadInterrupts>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a54:	f040 80b7 	bne.w	8001bc6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2110      	movs	r1, #16
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fb2c 	bl	80060d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a7c:	e046      	b.n	8001b0c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a90:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa2:	0151      	lsls	r1, r2, #5
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001aac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab4:	015a      	lsls	r2, r3, #5
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ac4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ae0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af6:	0151      	lsls	r1, r2, #5
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	440a      	add	r2, r1
 8001afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b08:	3301      	adds	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	791b      	ldrb	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d3b2      	bcc.n	8001a7e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b26:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7bdb      	ldrb	r3, [r3, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d016      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b44:	f043 030b 	orr.w	r3, r3, #11
 8001b48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b5a:	f043 030b 	orr.w	r3, r3, #11
 8001b5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b60:	e015      	b.n	8001b8e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b70:	4619      	mov	r1, r3
 8001b72:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001b76:	4313      	orrs	r3, r2
 8001b78:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b88:	f043 030b 	orr.w	r3, r3, #11
 8001b8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b9c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ba0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f005 fa75 	bl	80070a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 f9a2 	bl	8006f14 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bda:	d123      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 fa39 	bl	8007058 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fae9 	bl	80061c2 <USB_GetDevSpeed>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681c      	ldr	r4, [r3, #0]
 8001bfc:	f001 fd1e 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8001c00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c06:	461a      	mov	r2, r3
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f003 fff3 	bl	8005bf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f007 fd37 	bl	8009682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 f973 	bl	8006f14 <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d10a      	bne.n	8001c4e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f007 fd14 	bl	8009666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f002 0208 	and.w	r2, r2, #8
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 f95e 	bl	8006f14 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b80      	cmp	r3, #128	@ 0x80
 8001c60:	d123      	bne.n	8001caa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c6e:	2301      	movs	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c72:	e014      	b.n	8001c9e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fb0a 	bl	80022ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3e4      	bcc.n	8001c74 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 f930 	bl	8006f14 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cbe:	d13c      	bne.n	8001d3a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc4:	e02b      	b.n	8001d1e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d115      	bne.n	8001d18 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da12      	bge.n	8001d18 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3317      	adds	r3, #23
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 faca 	bl	80022ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	461a      	mov	r2, r3
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d3cd      	bcc.n	8001cc6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f005 f8e8 	bl	8006f14 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d4e:	d156      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d50:	2301      	movs	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d54:	e045      	b.n	8001de2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d12e      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da2b      	bge.n	8001ddc <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	0c1a      	lsrs	r2, r3, #16
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001d8e:	4053      	eors	r3, r2
 8001d90:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d121      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10a      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd8:	6053      	str	r3, [r2, #4]
            break;
 8001dda:	e008      	b.n	8001dee <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	3301      	adds	r3, #1
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d3b3      	bcc.n	8001d56 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 f886 	bl	8006f14 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d10a      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f007 fcb5 	bl	8009784 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 f870 	bl	8006f14 <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d115      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f007 fca5 	bl	80097a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e000      	b.n	8001e6a <HAL_PCD_IRQHandler+0x996>
      return;
 8001e68:	bf00      	nop
    }
  }
}
 8001e6a:	3734      	adds	r7, #52	@ 0x34
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_SetAddress+0x1a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e012      	b.n	8001eb0 <HAL_PCD_SetAddress+0x40>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 ffcf 	bl	8006e44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	70fb      	strb	r3, [r7, #3]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	803b      	strh	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da0f      	bge.n	8001efe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3310      	adds	r3, #16
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
 8001efc:	e00f      	b.n	8001f1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f2a:	883b      	ldrh	r3, [r7, #0]
 8001f2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	78ba      	ldrb	r2, [r7, #2]
 8001f38:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f4c:	78bb      	ldrb	r3, [r7, #2]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d102      	bne.n	8001f58 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_PCD_EP_Open+0xae>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e00e      	b.n	8001f84 <HAL_PCD_EP_Open+0xcc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68f9      	ldr	r1, [r7, #12]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f004 f949 	bl	800620c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da0f      	bge.n	8001fc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	3310      	adds	r3, #16
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	705a      	strb	r2, [r3, #1]
 8001fbe:	e00f      	b.n	8001fe0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_PCD_EP_Close+0x6e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e00e      	b.n	8002018 <HAL_PCD_EP_Close+0x8c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f004 f987 	bl	800631c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	460b      	mov	r3, r1
 800202e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 020f 	and.w	r2, r3, #15
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	799b      	ldrb	r3, [r3, #6]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	799b      	ldrb	r3, [r3, #6]
 8002084:	461a      	mov	r2, r3
 8002086:	6979      	ldr	r1, [r7, #20]
 8002088:	f004 fa24 	bl	80064d4 <USB_EPStartXfer>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 020f 	and.w	r2, r3, #15
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020b8:	681b      	ldr	r3, [r3, #0]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	460b      	mov	r3, r1
 80020d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3310      	adds	r3, #16
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	b2da      	uxtb	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	799b      	ldrb	r3, [r3, #6]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d102      	bne.n	8002120 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	799b      	ldrb	r3, [r3, #6]
 8002128:	461a      	mov	r2, r3
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	f004 f9d2 	bl	80064d4 <USB_EPStartXfer>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	7912      	ldrb	r2, [r2, #4]
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e04f      	b.n	80021f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0f      	bge.n	8002180 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3310      	adds	r3, #16
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	705a      	strb	r2, [r3, #1]
 800217e:	e00d      	b.n	800219c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_EP_SetStall+0x82>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e01d      	b.n	80021f8 <HAL_PCD_EP_SetStall+0xbe>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fd66 	bl	8006c9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7999      	ldrb	r1, [r3, #6]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e8:	461a      	mov	r2, r3
 80021ea:	f004 ff59 	bl	80070a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	7912      	ldrb	r2, [r2, #4]
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e042      	b.n	80022a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800221e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da0f      	bge.n	8002246 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 020f 	and.w	r2, r3, #15
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	3310      	adds	r3, #16
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	705a      	strb	r2, [r3, #1]
 8002244:	e00f      	b.n	8002266 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 020f 	and.w	r2, r3, #15
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_PCD_EP_ClrStall+0x86>
 8002282:	2302      	movs	r3, #2
 8002284:	e00e      	b.n	80022a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68f9      	ldr	r1, [r7, #12]
 8002294:	4618      	mov	r0, r3
 8002296:	f004 fd6f 	bl	8006d78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	da0c      	bge.n	80022da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	3310      	adds	r3, #16
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e00c      	b.n	80022f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 fb8e 	bl	8006a1c <USB_EPStopXfer>
 8002300:	4603      	mov	r3, r0
 8002302:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002304:	7afb      	ldrb	r3, [r7, #11]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b08a      	sub	sp, #40	@ 0x28
 8002312:	af02      	add	r7, sp, #8
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	3310      	adds	r3, #16
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d901      	bls.n	8002346 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06b      	b.n	800241e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	429a      	cmp	r2, r3
 800235a:	d902      	bls.n	8002362 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3303      	adds	r3, #3
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236a:	e02a      	b.n	80023c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	429a      	cmp	r2, r3
 8002380:	d902      	bls.n	8002388 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3303      	adds	r3, #3
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68d9      	ldr	r1, [r3, #12]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4603      	mov	r3, r0
 80023a4:	6978      	ldr	r0, [r7, #20]
 80023a6:	f004 fbe3 	bl	8006b70 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	441a      	add	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	441a      	add	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d809      	bhi.n	80023ec <PCD_WriteEmptyTxFifo+0xde>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d203      	bcs.n	80023ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1bf      	bne.n	800236c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d811      	bhi.n	800241c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	43db      	mvns	r3, r3
 8002412:	6939      	ldr	r1, [r7, #16]
 8002414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002418:	4013      	ands	r3, r2
 800241a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	333c      	adds	r3, #60	@ 0x3c
 8002440:	3304      	adds	r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	799b      	ldrb	r3, [r3, #6]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d17b      	bne.n	8002556 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f240 80b9 	bls.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b3 	beq.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248a:	461a      	mov	r2, r3
 800248c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002490:	6093      	str	r3, [r2, #8]
 8002492:	e0a7      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024aa:	461a      	mov	r2, r3
 80024ac:	2320      	movs	r3, #32
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	e098      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8093 	bne.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d90f      	bls.n	80024e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024dc:	461a      	mov	r2, r3
 80024de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024e2:	6093      	str	r3, [r2, #8]
 80024e4:	e07e      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1a      	ldr	r2, [r3, #32]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	0159      	lsls	r1, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	440b      	add	r3, r1
 8002508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	1ad2      	subs	r2, r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d114      	bne.n	8002548 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002530:	461a      	mov	r2, r3
 8002532:	2101      	movs	r1, #1
 8002534:	f004 fdb4 	bl	80070a0 <USB_EP0_OutStart>
 8002538:	e006      	b.n	8002548 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f007 f854 	bl	80095fc <HAL_PCD_DataOutStageCallback>
 8002554:	e046      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d124      	bne.n	80025a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002574:	461a      	mov	r2, r3
 8002576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800257a:	6093      	str	r3, [r2, #8]
 800257c:	e032      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	2320      	movs	r3, #32
 8002598:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f007 f82b 	bl	80095fc <HAL_PCD_DataOutStageCallback>
 80025a6:	e01d      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d114      	bne.n	80025d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025d0:	461a      	mov	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f004 fd64 	bl	80070a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f007 f80c 	bl	80095fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	4f54300a 	.word	0x4f54300a
 80025f4:	4f54310a 	.word	0x4f54310a

080025f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	333c      	adds	r3, #60	@ 0x3c
 8002610:	3304      	adds	r3, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d90e      	bls.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800264a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f006 ffc3 	bl	80095d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d90c      	bls.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	f004 fd16 	bl	80070a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	4f54300a 	.word	0x4f54300a

08002684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
 8002690:	4613      	mov	r3, r2
 8002692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	0419      	lsls	r1, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b0:	e028      	b.n	8002704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e00d      	b.n	80026e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3340      	adds	r3, #64	@ 0x40
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3ec      	bcc.n	80026c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026ec:	883b      	ldrh	r3, [r7, #0]
 80026ee:	0418      	lsls	r0, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	4302      	orrs	r2, r0
 80026fc:	3340      	adds	r3, #64	@ 0x40
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_PCDEx_ActivateLPM+0x44>)
 8002764:	4313      	orrs	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	10000003 	.word	0x10000003

0800277c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_PWREx_ConfigSupply+0x70>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d00a      	beq.n	80027be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027a8:	4b16      	ldr	r3, [pc, #88]	@ (8002804 <HAL_PWREx_ConfigSupply+0x70>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e01f      	b.n	80027fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e01d      	b.n	80027fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_PWREx_ConfigSupply+0x70>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	490f      	ldr	r1, [pc, #60]	@ (8002804 <HAL_PWREx_ConfigSupply+0x70>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027ce:	f7fe f9b1 	bl	8000b34 <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027d4:	e009      	b.n	80027ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027d6:	f7fe f9ad 	bl	8000b34 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027e4:	d901      	bls.n	80027ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e007      	b.n	80027fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_PWREx_ConfigSupply+0x70>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f6:	d1ee      	bne.n	80027d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	58024800 	.word	0x58024800

08002808 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	58024800 	.word	0x58024800

08002828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3c8      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002848:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002852:	4b86      	ldr	r3, [pc, #536]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800285a:	2b10      	cmp	r3, #16
 800285c:	d007      	beq.n	800286e <HAL_RCC_OscConfig+0x46>
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	2b18      	cmp	r3, #24
 8002862:	d110      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x12c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e3a2      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x76>
 8002890:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a75      	ldr	r2, [pc, #468]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b71      	ldr	r3, [pc, #452]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a70      	ldr	r2, [pc, #448]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6e      	ldr	r3, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6d      	ldr	r2, [pc, #436]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xbc>
 80028ca:	4b68      	ldr	r3, [pc, #416]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a67      	ldr	r2, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a64      	ldr	r2, [pc, #400]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd4>
 80028e4:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe f916 	bl	8000b34 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe f912 	bl	8000b34 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e356      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291e:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe4>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe f902 	bl	8000b34 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe f8fe 	bl	8000b34 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e342      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002946:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x10c>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808c 	beq.w	8002a7c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800296c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x162>
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	2b18      	cmp	r3, #24
 800297e:	d137      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1c8>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d132      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298a:	4b38      	ldr	r3, [pc, #224]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x17a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e314      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029a2:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0219 	bic.w	r2, r3, #25
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	492f      	ldr	r1, [pc, #188]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe f8be 	bl	8000b34 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029bc:	f7fe f8ba 	bl	8000b34 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e2fe      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	4920      	ldr	r1, [pc, #128]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ee:	e045      	b.n	8002a7c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d026      	beq.n	8002a46 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029f8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f023 0219 	bic.w	r2, r3, #25
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4919      	ldr	r1, [pc, #100]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe f893 	bl	8000b34 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe f88f 	bl	8000b34 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e2d3      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	490b      	ldr	r1, [pc, #44]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e01a      	b.n	8002a7c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <HAL_RCC_OscConfig+0x244>)
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe f86f 	bl	8000b34 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7fe f86b 	bl	8000b34 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d903      	bls.n	8002a70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e2af      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
 8002a6c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a70:	4b96      	ldr	r3, [pc, #600]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ee      	bne.n	8002a5a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d06a      	beq.n	8002b5e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a88:	4b90      	ldr	r3, [pc, #576]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a92:	4b8e      	ldr	r3, [pc, #568]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d007      	beq.n	8002aae <HAL_RCC_OscConfig+0x286>
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b18      	cmp	r3, #24
 8002aa2:	d11b      	bne.n	8002adc <HAL_RCC_OscConfig+0x2b4>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d116      	bne.n	8002adc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aae:	4b87      	ldr	r3, [pc, #540]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x29e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e282      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	497d      	ldr	r1, [pc, #500]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ada:	e040      	b.n	8002b5e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d023      	beq.n	8002b2c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ae4:	4b79      	ldr	r3, [pc, #484]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a78      	ldr	r2, [pc, #480]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe f820 	bl	8000b34 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002af8:	f7fe f81c 	bl	8000b34 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e260      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	061b      	lsls	r3, r3, #24
 8002b24:	4969      	ldr	r1, [pc, #420]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]
 8002b2a:	e018      	b.n	8002b5e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b2c:	4b67      	ldr	r3, [pc, #412]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a66      	ldr	r2, [pc, #408]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fd fffc 	bl	8000b34 <HAL_GetTick>
 8002b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b40:	f7fd fff8 	bl	8000b34 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e23c      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b52:	4b5e      	ldr	r3, [pc, #376]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d036      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d019      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b56      	ldr	r3, [pc, #344]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	4a55      	ldr	r2, [pc, #340]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fd ffd9 	bl	8000b34 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fd ffd5 	bl	8000b34 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e219      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b98:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x35e>
 8002ba4:	e018      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002baa:	4a48      	ldr	r2, [pc, #288]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fd ffbf 	bl	8000b34 <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fd ffbb 	bl	8000b34 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1ff      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d036      	beq.n	8002c52 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d019      	beq.n	8002c20 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a36      	ldr	r2, [pc, #216]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002bf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bf8:	f7fd ff9c 	bl	8000b34 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c00:	f7fd ff98 	bl	8000b34 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1dc      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c12:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3d8>
 8002c1e:	e018      	b.n	8002c52 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c2c:	f7fd ff82 	bl	8000b34 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c34:	f7fd ff7e 	bl	8000b34 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1c2      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c46:	4b21      	ldr	r3, [pc, #132]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8086 	beq.w	8002d6c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <HAL_RCC_OscConfig+0x4a8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd0 <HAL_RCC_OscConfig+0x4a8>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6c:	f7fd ff62 	bl	8000b34 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fd ff5e 	bl	8000b34 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1a2      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCC_OscConfig+0x4a8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x480>
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4ac>
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <HAL_RCC_OscConfig+0x4a4>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc8:	e021      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e6>
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	58024800 	.word	0x58024800
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4ce>
 8002cdc:	4b83      	ldr	r3, [pc, #524]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a82      	ldr	r2, [pc, #520]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	4b80      	ldr	r3, [pc, #512]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a7f      	ldr	r2, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	e00b      	b.n	8002d0e <HAL_RCC_OscConfig+0x4e6>
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d02:	4b7a      	ldr	r3, [pc, #488]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d06:	4a79      	ldr	r2, [pc, #484]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d015      	beq.n	8002d42 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fd ff0d 	bl	8000b34 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fd ff09 	bl	8000b34 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e14b      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d34:	4b6d      	ldr	r3, [pc, #436]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ee      	beq.n	8002d1e <HAL_RCC_OscConfig+0x4f6>
 8002d40:	e014      	b.n	8002d6c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fd fef7 	bl	8000b34 <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fd fef3 	bl	8000b34 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e135      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d60:	4b62      	ldr	r3, [pc, #392]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ee      	bne.n	8002d4a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 812a 	beq.w	8002fca <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7e:	2b18      	cmp	r3, #24
 8002d80:	f000 80ba 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f040 8095 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a56      	ldr	r2, [pc, #344]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002d94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fd fecb 	bl	8000b34 <HAL_GetTick>
 8002d9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fd fec7 	bl	8000b34 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e10b      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db4:	4b4d      	ldr	r3, [pc, #308]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_OscConfig+0x6c8>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	4945      	ldr	r1, [pc, #276]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	628b      	str	r3, [r1, #40]	@ 0x28
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de8:	3b01      	subs	r3, #1
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	3b01      	subs	r3, #1
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e02:	3b01      	subs	r3, #1
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e0a:	4938      	ldr	r1, [pc, #224]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	4a35      	ldr	r2, [pc, #212]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e20:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <HAL_RCC_OscConfig+0x6cc>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f023 020c 	bic.w	r2, r3, #12
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	492b      	ldr	r1, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e42:	4b2a      	ldr	r3, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	f023 0202 	bic.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	4927      	ldr	r1, [pc, #156]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e54:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	4a24      	ldr	r2, [pc, #144]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e60:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	4a21      	ldr	r2, [pc, #132]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	4a1e      	ldr	r2, [pc, #120]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e78:	4b1c      	ldr	r3, [pc, #112]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fd fe50 	bl	8000b34 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fd fe4c 	bl	8000b34 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e090      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x670>
 8002eb6:	e088      	b.n	8002fca <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fd fe36 	bl	8000b34 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fd fe32 	bl	8000b34 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e076      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <HAL_RCC_OscConfig+0x6c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x6a4>
 8002eea:	e06e      	b.n	8002fca <HAL_RCC_OscConfig+0x7a2>
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	fffffc0c 	.word	0xfffffc0c
 8002ef4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002efe:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d031      	beq.n	8002f70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d122      	bne.n	8002f70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	0a5b      	lsrs	r3, r3, #9
 8002f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d111      	bne.n	8002f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d108      	bne.n	8002f70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	0e1b      	lsrs	r3, r3, #24
 8002f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e02b      	b.n	8002fcc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f74:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d01f      	beq.n	8002fca <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f8a:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	4a11      	ldr	r2, [pc, #68]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f96:	f7fd fdcd 	bl	8000b34 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f9c:	bf00      	nop
 8002f9e:	f7fd fdc9 	bl	8000b34 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d0f9      	beq.n	8002f9e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_RCC_OscConfig+0x7b0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	4906      	ldr	r1, [pc, #24]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_RCC_OscConfig+0x7ac>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3730      	adds	r7, #48	@ 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	ffff0007 	.word	0xffff0007

08002fdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e19c      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b8a      	ldr	r3, [pc, #552]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b87      	ldr	r3, [pc, #540]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	4985      	ldr	r1, [pc, #532]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e184      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d010      	beq.n	800304e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	4b7b      	ldr	r3, [pc, #492]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003038:	429a      	cmp	r2, r3
 800303a:	d908      	bls.n	800304e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800303c:	4b78      	ldr	r3, [pc, #480]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4975      	ldr	r1, [pc, #468]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800304a:	4313      	orrs	r3, r2
 800304c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d010      	beq.n	800307c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003066:	429a      	cmp	r2, r3
 8003068:	d908      	bls.n	800307c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	496a      	ldr	r1, [pc, #424]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d010      	beq.n	80030aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	4b64      	ldr	r3, [pc, #400]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003094:	429a      	cmp	r2, r3
 8003096:	d908      	bls.n	80030aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003098:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	495e      	ldr	r1, [pc, #376]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69da      	ldr	r2, [r3, #28]
 80030ba:	4b59      	ldr	r3, [pc, #356]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030c6:	4b56      	ldr	r3, [pc, #344]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4953      	ldr	r1, [pc, #332]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d908      	bls.n	8003106 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 020f 	bic.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4947      	ldr	r1, [pc, #284]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d055      	beq.n	80031be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003112:	4b43      	ldr	r3, [pc, #268]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	4940      	ldr	r1, [pc, #256]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d107      	bne.n	800313c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800312c:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d121      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0f6      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d107      	bne.n	8003154 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003144:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d115      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ea      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800315c:	4b30      	ldr	r3, [pc, #192]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d109      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0de      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800316c:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0d6      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f023 0207 	bic.w	r2, r3, #7
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 800318a:	4313      	orrs	r3, r2
 800318c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318e:	f7fd fcd1 	bl	8000b34 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003194:	e00a      	b.n	80031ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003196:	f7fd fccd 	bl	8000b34 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0be      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d1eb      	bne.n	8003196 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d208      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	490e      	ldr	r1, [pc, #56]	@ (8003220 <HAL_RCC_ClockConfig+0x244>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d214      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b08      	ldr	r3, [pc, #32]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 020f 	bic.w	r2, r3, #15
 8003202:	4906      	ldr	r1, [pc, #24]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b04      	ldr	r3, [pc, #16]	@ (800321c <HAL_RCC_ClockConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e086      	b.n	800332a <HAL_RCC_ClockConfig+0x34e>
 800321c:	52002000 	.word	0x52002000
 8003220:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	4b3f      	ldr	r3, [pc, #252]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003240:	4b3c      	ldr	r3, [pc, #240]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	4939      	ldr	r1, [pc, #228]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800324e:	4313      	orrs	r3, r2
 8003250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	4b34      	ldr	r3, [pc, #208]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800326a:	429a      	cmp	r2, r3
 800326c:	d208      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800326e:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	492e      	ldr	r1, [pc, #184]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800327c:	4313      	orrs	r3, r2
 800327e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	4b28      	ldr	r3, [pc, #160]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800329c:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4922      	ldr	r1, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d208      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4917      	ldr	r1, [pc, #92]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032dc:	f000 f834 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	4912      	ldr	r1, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x35c>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
 80032f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_RCC_ClockConfig+0x358>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <HAL_RCC_ClockConfig+0x35c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
 8003310:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x360>)
 8003312:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003314:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x364>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x368>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd fbbe 	bl	8000aa0 <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	08009c1c 	.word	0x08009c1c
 800333c:	24000004 	.word	0x24000004
 8003340:	24000000 	.word	0x24000000
 8003344:	24000008 	.word	0x24000008

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800334e:	4bb3      	ldr	r3, [pc, #716]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003356:	2b18      	cmp	r3, #24
 8003358:	f200 8155 	bhi.w	8003606 <HAL_RCC_GetSysClockFreq+0x2be>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <HAL_RCC_GetSysClockFreq+0x1c>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	080033c9 	.word	0x080033c9
 8003368:	08003607 	.word	0x08003607
 800336c:	08003607 	.word	0x08003607
 8003370:	08003607 	.word	0x08003607
 8003374:	08003607 	.word	0x08003607
 8003378:	08003607 	.word	0x08003607
 800337c:	08003607 	.word	0x08003607
 8003380:	08003607 	.word	0x08003607
 8003384:	080033ef 	.word	0x080033ef
 8003388:	08003607 	.word	0x08003607
 800338c:	08003607 	.word	0x08003607
 8003390:	08003607 	.word	0x08003607
 8003394:	08003607 	.word	0x08003607
 8003398:	08003607 	.word	0x08003607
 800339c:	08003607 	.word	0x08003607
 80033a0:	08003607 	.word	0x08003607
 80033a4:	080033f5 	.word	0x080033f5
 80033a8:	08003607 	.word	0x08003607
 80033ac:	08003607 	.word	0x08003607
 80033b0:	08003607 	.word	0x08003607
 80033b4:	08003607 	.word	0x08003607
 80033b8:	08003607 	.word	0x08003607
 80033bc:	08003607 	.word	0x08003607
 80033c0:	08003607 	.word	0x08003607
 80033c4:	080033fb 	.word	0x080033fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033c8:	4b94      	ldr	r3, [pc, #592]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033d4:	4b91      	ldr	r3, [pc, #580]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	4a90      	ldr	r2, [pc, #576]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80033e6:	e111      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ea:	61bb      	str	r3, [r7, #24]
      break;
 80033ec:	e10e      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80033ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f0:	61bb      	str	r3, [r7, #24]
      break;
 80033f2:	e10b      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80033f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033f6:	61bb      	str	r3, [r7, #24]
      break;
 80033f8:	e108      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033fa:	4b88      	ldr	r3, [pc, #544]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003404:	4b85      	ldr	r3, [pc, #532]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800340e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003410:	4b82      	ldr	r3, [pc, #520]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800341a:	4b80      	ldr	r3, [pc, #512]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80e1 	beq.w	8003600 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b02      	cmp	r3, #2
 8003442:	f000 8083 	beq.w	800354c <HAL_RCC_GetSysClockFreq+0x204>
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b02      	cmp	r3, #2
 800344a:	f200 80a1 	bhi.w	8003590 <HAL_RCC_GetSysClockFreq+0x248>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x114>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d056      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x1c0>
 800345a:	e099      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800345c:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02d      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003468:	4b6c      	ldr	r3, [pc, #432]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	4a6b      	ldr	r2, [pc, #428]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b62      	ldr	r3, [pc, #392]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80034c2:	e087      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003630 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b51      	ldr	r3, [pc, #324]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e065      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003634 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b40      	ldr	r3, [pc, #256]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	e043      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003638 <HAL_RCC_GetSysClockFreq+0x2f0>
 800355a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800355e:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800356e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003572:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800357e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800358e:	e021      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003634 <HAL_RCC_GetSysClockFreq+0x2ec>
 800359e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a2:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800362c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	0a5b      	lsrs	r3, r3, #9
 80035da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035de:	3301      	adds	r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80035f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f8:	ee17 3a90 	vmov	r3, s15
 80035fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80035fe:	e005      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003608:	61bb      	str	r3, [r7, #24]
      break;
 800360a:	bf00      	nop
  }

  return sysclockfreq;
 800360c:	69bb      	ldr	r3, [r7, #24]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	@ 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
 8003620:	03d09000 	.word	0x03d09000
 8003624:	003d0900 	.word	0x003d0900
 8003628:	02dc6c00 	.word	0x02dc6c00
 800362c:	46000000 	.word	0x46000000
 8003630:	4c742400 	.word	0x4c742400
 8003634:	4a742400 	.word	0x4a742400
 8003638:	4c371b00 	.word	0x4c371b00

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003642:	f7ff fe81 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003646:	4602      	mov	r2, r0
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_GetHCLKFreq+0x50>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	490f      	ldr	r1, [pc, #60]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x54>)
 8003654:	5ccb      	ldrb	r3, [r1, r3]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003660:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <HAL_RCC_GetHCLKFreq+0x50>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4a09      	ldr	r2, [pc, #36]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x54>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x58>)
 8003678:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800367a:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <HAL_RCC_GetHCLKFreq+0x5c>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003680:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <HAL_RCC_GetHCLKFreq+0x58>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	58024400 	.word	0x58024400
 8003690:	08009c1c 	.word	0x08009c1c
 8003694:	24000004 	.word	0x24000004
 8003698:	24000000 	.word	0x24000000

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0c6      	sub	sp, #280	@ 0x118
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80036c0:	2500      	movs	r5, #0
 80036c2:	ea54 0305 	orrs.w	r3, r4, r5
 80036c6:	d049      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036d2:	d02f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036d8:	d828      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036de:	d01a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036e4:	d822      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ee:	d007      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036f0:	e01c      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f2:	4bab      	ldr	r3, [pc, #684]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	4aaa      	ldr	r2, [pc, #680]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fe:	e01a      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003704:	3308      	adds	r3, #8
 8003706:	2102      	movs	r1, #2
 8003708:	4618      	mov	r0, r3
 800370a:	f001 f967 	bl	80049dc <RCCEx_PLL2_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003714:	e00f      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371a:	3328      	adds	r3, #40	@ 0x28
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fa0e 	bl	8004b40 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800373e:	4b98      	ldr	r3, [pc, #608]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003742:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800374c:	4a94      	ldr	r2, [pc, #592]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800374e:	430b      	orrs	r3, r1
 8003750:	6513      	str	r3, [r2, #80]	@ 0x50
 8003752:	e003      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800375c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003764:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003768:	f04f 0900 	mov.w	r9, #0
 800376c:	ea58 0309 	orrs.w	r3, r8, r9
 8003770:	d047      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003778:	2b04      	cmp	r3, #4
 800377a:	d82a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800377c:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800377e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003782:	bf00      	nop
 8003784:	08003799 	.word	0x08003799
 8003788:	080037a7 	.word	0x080037a7
 800378c:	080037bd 	.word	0x080037bd
 8003790:	080037db 	.word	0x080037db
 8003794:	080037db 	.word	0x080037db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b81      	ldr	r3, [pc, #516]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4a80      	ldr	r2, [pc, #512]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a4:	e01a      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037aa:	3308      	adds	r3, #8
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f914 	bl	80049dc <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ba:	e00f      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c0:	3328      	adds	r3, #40	@ 0x28
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f9bb 	bl	8004b40 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d0:	e004      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037d8:	e000      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037e4:	4b6e      	ldr	r3, [pc, #440]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e8:	f023 0107 	bic.w	r1, r3, #7
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	4a6b      	ldr	r2, [pc, #428]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037f4:	430b      	orrs	r3, r1
 80037f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037f8:	e003      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800380e:	f04f 0b00 	mov.w	fp, #0
 8003812:	ea5a 030b 	orrs.w	r3, sl, fp
 8003816:	d05b      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800381c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003820:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003824:	d03b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003826:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800382a:	d834      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800382c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003830:	d037      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003836:	d82e      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003838:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800383c:	d033      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800383e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003842:	d828      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003848:	d01a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384e:	d822      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003854:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003858:	d007      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800385a:	e01c      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	4a4f      	ldr	r2, [pc, #316]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003868:	e01e      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800386e:	3308      	adds	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f8b2 	bl	80049dc <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800387e:	e013      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003884:	3328      	adds	r3, #40	@ 0x28
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f959 	bl	8004b40 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003894:	e008      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800389c:	e004      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80038a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038b0:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038c0:	4a37      	ldr	r2, [pc, #220]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c6:	e003      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d05d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038fc:	d03b      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003902:	d834      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003908:	d037      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800390a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800390e:	d82e      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003910:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003914:	d033      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003916:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800391a:	d828      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800391c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003920:	d01a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003926:	d822      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003930:	d007      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003932:	e01c      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003934:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	4a19      	ldr	r2, [pc, #100]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800393a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003940:	e01e      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003946:	3308      	adds	r3, #8
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f846 	bl	80049dc <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003956:	e013      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395c:	3328      	adds	r3, #40	@ 0x28
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f8ed 	bl	8004b40 <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800396c:	e008      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003998:	4a01      	ldr	r2, [pc, #4]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
 800399e:	e005      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80039a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d03a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d2:	2b30      	cmp	r3, #48	@ 0x30
 80039d4:	d01f      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80039d6:	2b30      	cmp	r3, #48	@ 0x30
 80039d8:	d819      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d815      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d019      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d111      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ea:	4baa      	ldr	r3, [pc, #680]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	4aa9      	ldr	r2, [pc, #676]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039f6:	e011      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	3308      	adds	r3, #8
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 ffeb 	bl	80049dc <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a24:	4b9b      	ldr	r3, [pc, #620]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	4a98      	ldr	r2, [pc, #608]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d051      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a6c:	d035      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a72:	d82e      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a78:	d031      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003a7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a7e:	d828      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a84:	d01a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8a:	d822      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003a96:	e01c      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b7e      	ldr	r3, [pc, #504]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aa4:	e01c      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aaa:	3308      	adds	r3, #8
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ff94 	bl	80049dc <RCCEx_PLL2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003aba:	e011      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac0:	3328      	adds	r3, #40	@ 0x28
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 f83b 	bl	8004b40 <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e006      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	4a67      	ldr	r2, [pc, #412]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003afc:	e003      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d053      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b30:	d033      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003b32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b36:	d82c      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b3c:	d02f      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b42:	d826      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b48:	d02b      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b4e:	d820      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b54:	d012      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b5a:	d81a      	bhi.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d022      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b64:	d115      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 ff34 	bl	80049dc <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b7a:	e015      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b80:	3328      	adds	r3, #40	@ 0x28
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 ffdb 	bl	8004b40 <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b98:	e006      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e004      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bb0:	4b38      	ldr	r3, [pc, #224]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	4a35      	ldr	r2, [pc, #212]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003be4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d058      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bfa:	d033      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c00:	d82c      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c06:	d02f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0c:	d826      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c12:	d02b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c18:	d820      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1e:	d012      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c24:	d81a      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d022      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c2e:	d115      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	3308      	adds	r3, #8
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fecf 	bl	80049dc <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ff76 	bl	8004b40 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c62:	e006      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c64:	bf00      	nop
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e002      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10e      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c7a:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c8a:	4a02      	ldr	r2, [pc, #8]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003cb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d037      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cca:	d00e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd0:	d816      	bhi.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cda:	d111      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cdc:	4bc4      	ldr	r3, [pc, #784]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	4ac3      	ldr	r2, [pc, #780]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cee:	3308      	adds	r3, #8
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fe72 	bl	80049dc <RCCEx_PLL2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d12:	4bb7      	ldr	r3, [pc, #732]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d20:	4ab3      	ldr	r2, [pc, #716]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d039      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d81c      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d9d 	.word	0x08003d9d
 8003d64:	08003d71 	.word	0x08003d71
 8003d68:	08003d7f 	.word	0x08003d7f
 8003d6c:	08003d9d 	.word	0x08003d9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4b9f      	ldr	r3, [pc, #636]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	4a9e      	ldr	r2, [pc, #632]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d7c:	e00f      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d82:	3308      	adds	r3, #8
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fe28 	bl	80049dc <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003da6:	4b92      	ldr	r3, [pc, #584]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	f023 0103 	bic.w	r1, r3, #3
 8003dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003db6:	430b      	orrs	r3, r1
 8003db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f000 8099 	beq.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de6:	4b83      	ldr	r3, [pc, #524]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a82      	ldr	r2, [pc, #520]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003df2:	f7fc fe9f 	bl	8000b34 <HAL_GetTick>
 8003df6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfc:	f7fc fe9a 	bl	8000b34 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b64      	cmp	r3, #100	@ 0x64
 8003e0a:	d903      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e12:	e005      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e14:	4b77      	ldr	r3, [pc, #476]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ed      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d173      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e28:	4b71      	ldr	r3, [pc, #452]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e34:	4053      	eors	r3, r2
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e46:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e4a:	4b69      	ldr	r3, [pc, #420]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4e:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e56:	4b66      	ldr	r3, [pc, #408]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	4a65      	ldr	r2, [pc, #404]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e62:	4a63      	ldr	r2, [pc, #396]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e76:	d118      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fc fe5c 	bl	8000b34 <HAL_GetTick>
 8003e7c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e80:	e00d      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fc fe57 	bl	8000b34 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e8c:	1ad2      	subs	r2, r2, r3
 8003e8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d903      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003e9c:	e005      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e9e:	4b54      	ldr	r3, [pc, #336]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0eb      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d129      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ed4:	091a      	lsrs	r2, r3, #4
 8003ed6:	4b48      	ldr	r3, [pc, #288]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	4a45      	ldr	r2, [pc, #276]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6113      	str	r3, [r2, #16]
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4a42      	ldr	r2, [pc, #264]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003eec:	6113      	str	r3, [r2, #16]
 8003eee:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ef0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efe:	4a3c      	ldr	r2, [pc, #240]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f002 0301 	and.w	r3, r2, #1
 8003f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f000 808f 	beq.w	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f40:	2b28      	cmp	r3, #40	@ 0x28
 8003f42:	d871      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003f44:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08004031 	.word	0x08004031
 8003f50:	08004029 	.word	0x08004029
 8003f54:	08004029 	.word	0x08004029
 8003f58:	08004029 	.word	0x08004029
 8003f5c:	08004029 	.word	0x08004029
 8003f60:	08004029 	.word	0x08004029
 8003f64:	08004029 	.word	0x08004029
 8003f68:	08004029 	.word	0x08004029
 8003f6c:	08003ffd 	.word	0x08003ffd
 8003f70:	08004029 	.word	0x08004029
 8003f74:	08004029 	.word	0x08004029
 8003f78:	08004029 	.word	0x08004029
 8003f7c:	08004029 	.word	0x08004029
 8003f80:	08004029 	.word	0x08004029
 8003f84:	08004029 	.word	0x08004029
 8003f88:	08004029 	.word	0x08004029
 8003f8c:	08004013 	.word	0x08004013
 8003f90:	08004029 	.word	0x08004029
 8003f94:	08004029 	.word	0x08004029
 8003f98:	08004029 	.word	0x08004029
 8003f9c:	08004029 	.word	0x08004029
 8003fa0:	08004029 	.word	0x08004029
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	08004029 	.word	0x08004029
 8003fac:	08004031 	.word	0x08004031
 8003fb0:	08004029 	.word	0x08004029
 8003fb4:	08004029 	.word	0x08004029
 8003fb8:	08004029 	.word	0x08004029
 8003fbc:	08004029 	.word	0x08004029
 8003fc0:	08004029 	.word	0x08004029
 8003fc4:	08004029 	.word	0x08004029
 8003fc8:	08004029 	.word	0x08004029
 8003fcc:	08004031 	.word	0x08004031
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08004029 	.word	0x08004029
 8003fd8:	08004029 	.word	0x08004029
 8003fdc:	08004029 	.word	0x08004029
 8003fe0:	08004029 	.word	0x08004029
 8003fe4:	08004029 	.word	0x08004029
 8003fe8:	08004029 	.word	0x08004029
 8003fec:	08004031 	.word	0x08004031
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	58024800 	.word	0x58024800
 8003ff8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	3308      	adds	r3, #8
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fce9 	bl	80049dc <RCCEx_PLL2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004010:	e00f      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004016:	3328      	adds	r3, #40	@ 0x28
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fd90 	bl	8004b40 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800403a:	4bbf      	ldr	r3, [pc, #764]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004048:	4abb      	ldr	r2, [pc, #748]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800404a:	430b      	orrs	r3, r1
 800404c:	6553      	str	r3, [r2, #84]	@ 0x54
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 0302 	and.w	r3, r2, #2
 8004064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800406e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d041      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	2b05      	cmp	r3, #5
 8004080:	d824      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	080040d5 	.word	0x080040d5
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040b7 	.word	0x080040b7
 8004094:	080040d5 	.word	0x080040d5
 8004098:	080040d5 	.word	0x080040d5
 800409c:	080040d5 	.word	0x080040d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a4:	3308      	adds	r3, #8
 80040a6:	2101      	movs	r1, #1
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fc97 	bl	80049dc <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ba:	3328      	adds	r3, #40	@ 0x28
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fd3e 	bl	8004b40 <RCCEx_PLL3_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040de:	4b96      	ldr	r3, [pc, #600]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	f023 0107 	bic.w	r1, r3, #7
 80040e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ec:	4a92      	ldr	r2, [pc, #584]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 0304 	and.w	r3, r2, #4
 8004108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004112:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d044      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	2b05      	cmp	r3, #5
 8004126:	d825      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004128:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	0800417d 	.word	0x0800417d
 8004134:	08004149 	.word	0x08004149
 8004138:	0800415f 	.word	0x0800415f
 800413c:	0800417d 	.word	0x0800417d
 8004140:	0800417d 	.word	0x0800417d
 8004144:	0800417d 	.word	0x0800417d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414c:	3308      	adds	r3, #8
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fc43 	bl	80049dc <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800415c:	e00f      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	3328      	adds	r3, #40	@ 0x28
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fcea 	bl	8004b40 <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004172:	e004      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004186:	4b6c      	ldr	r3, [pc, #432]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418a:	f023 0107 	bic.w	r1, r3, #7
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	4a68      	ldr	r2, [pc, #416]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004198:	430b      	orrs	r3, r1
 800419a:	6593      	str	r3, [r2, #88]	@ 0x58
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f002 0320 	and.w	r3, r2, #32
 80041b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d055      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d2:	d033      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80041d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d8:	d82c      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041de:	d02f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d826      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ea:	d02b      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041f0:	d820      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f6:	d012      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80041f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041fc:	d81a      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d022      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004206:	d115      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420c:	3308      	adds	r3, #8
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fbe3 	bl	80049dc <RCCEx_PLL2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800421c:	e015      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004222:	3328      	adds	r3, #40	@ 0x28
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fc8a 	bl	8004b40 <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004232:	e00a      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800423a:	e006      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800423c:	bf00      	nop
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004252:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004256:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004262:	4a35      	ldr	r2, [pc, #212]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6553      	str	r3, [r2, #84]	@ 0x54
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800426e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800427e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004282:	2300      	movs	r3, #0
 8004284:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004288:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d058      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800429a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800429e:	d033      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80042a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042a4:	d82c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042aa:	d02f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d826      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042b6:	d02b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042bc:	d820      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c2:	d012      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c8:	d81a      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d022      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80042ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042d2:	d115      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d8:	3308      	adds	r3, #8
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fb7d 	bl	80049dc <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042e8:	e015      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fc24 	bl	8004b40 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042fe:	e00a      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004308:	bf00      	nop
 800430a:	e004      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10e      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800432e:	4a02      	ldr	r2, [pc, #8]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6593      	str	r3, [r2, #88]	@ 0x58
 8004334:	e006      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004336:	bf00      	nop
 8004338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004350:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800435a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d055      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800436c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004370:	d033      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004372:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004376:	d82c      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437c:	d02f      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800437e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004382:	d826      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004384:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004388:	d02b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800438a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800438e:	d820      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004394:	d012      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800439a:	d81a      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d022      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a4:	d115      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043aa:	3308      	adds	r3, #8
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fb14 	bl	80049dc <RCCEx_PLL2_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043ba:	e015      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c0:	3328      	adds	r3, #40	@ 0x28
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fbbb 	bl	8004b40 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043d0:	e00a      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043d8:	e006      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043da:	bf00      	nop
 80043dc:	e004      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043de:	bf00      	nop
 80043e0:	e002      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80043e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043f0:	4ba0      	ldr	r3, [pc, #640]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004400:	4a9c      	ldr	r2, [pc, #624]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004402:	430b      	orrs	r3, r1
 8004404:	6593      	str	r3, [r2, #88]	@ 0x58
 8004406:	e003      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f002 0308 	and.w	r3, r2, #8
 800441c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004420:	2300      	movs	r3, #0
 8004422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004426:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d01e      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d10c      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fb7a 	bl	8004b40 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004458:	4b86      	ldr	r3, [pc, #536]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004468:	4a82      	ldr	r2, [pc, #520]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800446e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f002 0310 	and.w	r3, r2, #16
 800447a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004484:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d01e      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800448e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	d10c      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	3328      	adds	r3, #40	@ 0x28
 80044a2:	2102      	movs	r1, #2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb4b 	bl	8004b40 <RCCEx_PLL3_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044da:	2300      	movs	r3, #0
 80044dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d03e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f4:	d022      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044fa:	d81b      	bhi.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d00b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004506:	e015      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	3308      	adds	r3, #8
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fa63 	bl	80049dc <RCCEx_PLL2_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800451c:	e00f      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004522:	3328      	adds	r3, #40	@ 0x28
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb0a 	bl	8004b40 <RCCEx_PLL3_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004532:	e004      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800453a:	e000      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800453c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004546:	4b4b      	ldr	r3, [pc, #300]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004552:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004556:	4a47      	ldr	r2, [pc, #284]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6593      	str	r3, [r2, #88]	@ 0x58
 800455c:	e003      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004562:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004572:	673b      	str	r3, [r7, #112]	@ 0x70
 8004574:	2300      	movs	r3, #0
 8004576:	677b      	str	r3, [r7, #116]	@ 0x74
 8004578:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800457c:	460b      	mov	r3, r1
 800457e:	4313      	orrs	r3, r2
 8004580:	d03b      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800458e:	d01f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004590:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004594:	d818      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800459a:	d003      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800459c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045a0:	d007      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80045a2:	e011      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a8:	4a32      	ldr	r2, [pc, #200]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045b0:	e00f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	3328      	adds	r3, #40	@ 0x28
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fac0 	bl	8004b40 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80045d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045da:	4b26      	ldr	r3, [pc, #152]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ea:	4a22      	ldr	r2, [pc, #136]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004608:	2300      	movs	r3, #0
 800460a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800460c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d034      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004624:	d007      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004626:	e011      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b12      	ldr	r3, [pc, #72]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	4a11      	ldr	r2, [pc, #68]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004634:	e00e      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800463a:	3308      	adds	r3, #8
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f9cc 	bl	80049dc <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800464a:	e003      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800465e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004660:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466a:	4a02      	ldr	r2, [pc, #8]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800466c:	430b      	orrs	r3, r1
 800466e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004670:	e006      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004672:	bf00      	nop
 8004674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800467c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800468c:	663b      	str	r3, [r7, #96]	@ 0x60
 800468e:	2300      	movs	r3, #0
 8004690:	667b      	str	r3, [r7, #100]	@ 0x64
 8004692:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004696:	460b      	mov	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	d00c      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	3328      	adds	r3, #40	@ 0x28
 80046a2:	2102      	movs	r1, #2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa4b 	bl	8004b40 <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046c4:	2300      	movs	r3, #0
 80046c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d036      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046dc:	d018      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80046de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e2:	d811      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e8:	d014      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80046ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ee:	d80b      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f8:	d106      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046fa:	4bb7      	ldr	r3, [pc, #732]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	4ab6      	ldr	r2, [pc, #728]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004706:	e008      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800470e:	e004      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004710:	bf00      	nop
 8004712:	e002      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004722:	4bad      	ldr	r3, [pc, #692]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800472a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004730:	4aa9      	ldr	r2, [pc, #676]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	@ 0x54
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800473c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800474c:	653b      	str	r3, [r7, #80]	@ 0x50
 800474e:	2300      	movs	r3, #0
 8004750:	657b      	str	r3, [r7, #84]	@ 0x54
 8004752:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800475c:	4b9e      	ldr	r3, [pc, #632]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	4a9b      	ldr	r2, [pc, #620]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800477e:	2300      	movs	r3, #0
 8004780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004782:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800478c:	4b92      	ldr	r3, [pc, #584]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800479a:	4a8f      	ldr	r2, [pc, #572]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ae:	2300      	movs	r3, #0
 80047b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047b6:	460b      	mov	r3, r1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047bc:	4b86      	ldr	r3, [pc, #536]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4a85      	ldr	r2, [pc, #532]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047c6:	6113      	str	r3, [r2, #16]
 80047c8:	4b83      	ldr	r3, [pc, #524]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047ca:	6919      	ldr	r1, [r3, #16]
 80047cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80047d4:	4a80      	ldr	r2, [pc, #512]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047e8:	2300      	movs	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047f6:	4b78      	ldr	r3, [pc, #480]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004804:	4a74      	ldr	r2, [pc, #464]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004806:	430b      	orrs	r3, r1
 8004808:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004816:	633b      	str	r3, [r7, #48]	@ 0x30
 8004818:	2300      	movs	r3, #0
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004826:	4b6c      	ldr	r3, [pc, #432]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800482e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	4a68      	ldr	r2, [pc, #416]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004838:	430b      	orrs	r3, r1
 800483a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	2100      	movs	r1, #0
 8004846:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800484e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d011      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	3308      	adds	r3, #8
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f8bb 	bl	80049dc <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800486c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	2100      	movs	r1, #0
 8004886:	6239      	str	r1, [r7, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
 800488e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d011      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	3308      	adds	r3, #8
 800489e:	2101      	movs	r1, #1
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f89b 	bl	80049dc <RCCEx_PLL2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	2100      	movs	r1, #0
 80048c6:	61b9      	str	r1, [r7, #24]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d011      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048dc:	3308      	adds	r3, #8
 80048de:	2102      	movs	r1, #2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f87b 	bl	80049dc <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	2100      	movs	r1, #0
 8004906:	6139      	str	r1, [r7, #16]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	d011      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491c:	3328      	adds	r3, #40	@ 0x28
 800491e:	2100      	movs	r1, #0
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f90d 	bl	8004b40 <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800492c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	2100      	movs	r1, #0
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004952:	460b      	mov	r3, r1
 8004954:	4313      	orrs	r3, r2
 8004956:	d011      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495c:	3328      	adds	r3, #40	@ 0x28
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f8ed 	bl	8004b40 <RCCEx_PLL3_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800496c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800497c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	2100      	movs	r1, #0
 8004986:	6039      	str	r1, [r7, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004992:	460b      	mov	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	d011      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800499c:	3328      	adds	r3, #40	@ 0x28
 800499e:	2102      	movs	r1, #2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f8cd 	bl	8004b40 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80049ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80049bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400

080049dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ea:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d101      	bne.n	80049fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e099      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc f895 	bl	8000b34 <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a0e:	f7fc f891 	bl	8000b34 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e086      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a20:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a2c:	4b42      	ldr	r3, [pc, #264]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	493f      	ldr	r1, [pc, #252]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a70:	4931      	ldr	r1, [pc, #196]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a76:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	492d      	ldr	r1, [pc, #180]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a88:	4b2b      	ldr	r3, [pc, #172]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	f023 0220 	bic.w	r2, r3, #32
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4928      	ldr	r1, [pc, #160]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	f023 0310 	bic.w	r3, r3, #16
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <RCCEx_PLL2_Config+0x160>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	69d2      	ldr	r2, [r2, #28]
 8004ab2:	00d2      	lsls	r2, r2, #3
 8004ab4:	4920      	ldr	r1, [pc, #128]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f043 0310 	orr.w	r3, r3, #16
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004acc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ad8:	e00f      	b.n	8004afa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ae0:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aec:	e005      	b.n	8004afa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	4a11      	ldr	r2, [pc, #68]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004afa:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b06:	f7fc f815 	bl	8000b34 <HAL_GetTick>
 8004b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b0c:	e008      	b.n	8004b20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b0e:	f7fc f811 	bl	8000b34 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	ffff0007 	.word	0xffff0007

08004b40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b4e:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d101      	bne.n	8004b5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e099      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4e      	ldr	r2, [pc, #312]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fb ffe3 	bl	8000b34 <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b72:	f7fb ffdf 	bl	8000b34 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e086      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b84:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b90:	4b42      	ldr	r3, [pc, #264]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	051b      	lsls	r3, r3, #20
 8004b9e:	493f      	ldr	r1, [pc, #252]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bd4:	4931      	ldr	r1, [pc, #196]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bda:	4b30      	ldr	r3, [pc, #192]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	492d      	ldr	r1, [pc, #180]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bec:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4928      	ldr	r1, [pc, #160]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bfe:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <RCCEx_PLL3_Config+0x160>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	69d2      	ldr	r2, [r2, #28]
 8004c16:	00d2      	lsls	r2, r2, #3
 8004c18:	4920      	ldr	r1, [pc, #128]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a1e      	ldr	r2, [pc, #120]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c3c:	e00f      	b.n	8004c5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c50:	e005      	b.n	8004c5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c52:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	4a11      	ldr	r2, [pc, #68]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a0e      	ldr	r2, [pc, #56]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fb ff63 	bl	8000b34 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c70:	e008      	b.n	8004c84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c72:	f7fb ff5f 	bl	8000b34 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	ffff0007 	.word	0xffff0007

08004ca4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e10f      	b.n	8004ed6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a87      	ldr	r2, [pc, #540]	@ (8004ee0 <HAL_SPI_Init+0x23c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <HAL_SPI_Init+0x42>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a86      	ldr	r2, [pc, #536]	@ (8004ee4 <HAL_SPI_Init+0x240>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00a      	beq.n	8004ce6 <HAL_SPI_Init+0x42>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a84      	ldr	r2, [pc, #528]	@ (8004ee8 <HAL_SPI_Init+0x244>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d005      	beq.n	8004ce6 <HAL_SPI_Init+0x42>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d901      	bls.n	8004ce6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0f7      	b.n	8004ed6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fef6 	bl	8005ad8 <SPI_GetPacketSize>
 8004cec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ee0 <HAL_SPI_Init+0x23c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00c      	beq.n	8004d12 <HAL_SPI_Init+0x6e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a79      	ldr	r2, [pc, #484]	@ (8004ee4 <HAL_SPI_Init+0x240>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_Init+0x6e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a78      	ldr	r2, [pc, #480]	@ (8004ee8 <HAL_SPI_Init+0x244>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Init+0x6e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d811      	bhi.n	8004d36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d16:	4a72      	ldr	r2, [pc, #456]	@ (8004ee0 <HAL_SPI_Init+0x23c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a70      	ldr	r2, [pc, #448]	@ (8004ee4 <HAL_SPI_Init+0x240>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_SPI_Init+0x8c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <HAL_SPI_Init+0x244>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d104      	bne.n	8004d3a <HAL_SPI_Init+0x96>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b10      	cmp	r3, #16
 8004d34:	d901      	bls.n	8004d3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0cd      	b.n	8004ed6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fb fcf4 	bl	800073c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004d76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d80:	d119      	bne.n	8004db6 <HAL_SPI_Init+0x112>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d8a:	d103      	bne.n	8004d94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10c      	bne.n	8004db6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004da4:	d107      	bne.n	8004db6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004db4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <HAL_SPI_Init+0x13e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b06      	cmp	r3, #6
 8004dc8:	d90b      	bls.n	8004de2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e007      	b.n	8004df2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e52:	ea42 0103 	orr.w	r1, r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d113      	bne.n	8004e92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40013000 	.word	0x40013000
 8004ee4:	40003800 	.word	0x40003800
 8004ee8:	40003c00 	.word	0x40003c00

08004eec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3320      	adds	r3, #32
 8004f02:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f04:	f7fb fe16 	bl	8000b34 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
 8004f18:	e1d1      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_SPI_Transmit+0x3a>
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e1c9      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_SPI_Transmit+0x4c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e1c2      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2203      	movs	r2, #3
 8004f44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004f90:	d108      	bne.n	8004fa4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e009      	b.n	8004fb8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004fb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4b96      	ldr	r3, [pc, #600]	@ (8005218 <HAL_SPI_Transmit+0x32c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	88f9      	ldrh	r1, [r7, #6]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe4:	d107      	bne.n	8004ff6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d947      	bls.n	800508e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ffe:	e03f      	b.n	8005080 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d114      	bne.n	8005038 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005036:	e023      	b.n	8005080 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fb fd7c 	bl	8000b34 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Transmit+0x164>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x16a>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d114      	bne.n	8005080 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fc70 	bl	800593c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e11e      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1b9      	bne.n	8005000 <HAL_SPI_Transmit+0x114>
 800508c:	e0f1      	b.n	8005272 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b07      	cmp	r3, #7
 8005094:	f240 80e6 	bls.w	8005264 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005098:	e05d      	b.n	8005156 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d132      	bne.n	800510e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d918      	bls.n	80050e6 <HAL_SPI_Transmit+0x1fa>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050cc:	1d1a      	adds	r2, r3, #4
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b02      	subs	r3, #2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80050e4:	e037      	b.n	8005156 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	881a      	ldrh	r2, [r3, #0]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800510c:	e023      	b.n	8005156 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fb fd11 	bl	8000b34 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d803      	bhi.n	8005126 <HAL_SPI_Transmit+0x23a>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005124:	d102      	bne.n	800512c <HAL_SPI_Transmit+0x240>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d114      	bne.n	8005156 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fc05 	bl	800593c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0b3      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d19b      	bne.n	800509a <HAL_SPI_Transmit+0x1ae>
 8005162:	e086      	b.n	8005272 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d154      	bne.n	800521c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d918      	bls.n	80051b0 <HAL_SPI_Transmit+0x2c4>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	d914      	bls.n	80051b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b04      	subs	r3, #4
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051ae:	e059      	b.n	8005264 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d917      	bls.n	80051ec <HAL_SPI_Transmit+0x300>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d013      	beq.n	80051ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c8:	881a      	ldrh	r2, [r3, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b02      	subs	r3, #2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80051ea:	e03b      	b.n	8005264 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3320      	adds	r3, #32
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005216:	e025      	b.n	8005264 <HAL_SPI_Transmit+0x378>
 8005218:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521c:	f7fb fc8a 	bl	8000b34 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d803      	bhi.n	8005234 <HAL_SPI_Transmit+0x348>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x34e>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d114      	bne.n	8005264 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fb7e 	bl	800593c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005246:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e02c      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	f47f af79 	bne.w	8005164 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	2108      	movs	r1, #8
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fbfd 	bl	8005a7c <SPI_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fb4f 	bl	800593c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop

080052c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08e      	sub	sp, #56	@ 0x38
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3320      	adds	r3, #32
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3330      	adds	r3, #48	@ 0x30
 80052e4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3301      	adds	r3, #1
 80052f0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052f2:	f7fb fc1f 	bl	8000b34 <HAL_GetTick>
 80052f6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80052f8:	887b      	ldrh	r3, [r7, #2]
 80052fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
 800530e:	e310      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x5a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x5a>
 800531c:	887b      	ldrh	r3, [r7, #2]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e305      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x6c>
 8005330:	2302      	movs	r3, #2
 8005332:	e2fe      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2205      	movs	r2, #5
 8005340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	887a      	ldrh	r2, [r7, #2]
 8005356:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8005392:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a70      	ldr	r2, [pc, #448]	@ (800555c <HAL_SPI_TransmitReceive+0x294>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0xea>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005560 <HAL_SPI_TransmitReceive+0x298>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_SPI_TransmitReceive+0xea>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6d      	ldr	r2, [pc, #436]	@ (8005564 <HAL_SPI_TransmitReceive+0x29c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80053b2:	2310      	movs	r3, #16
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b6:	e001      	b.n	80053bc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80053b8:	2308      	movs	r3, #8
 80053ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4b69      	ldr	r3, [pc, #420]	@ (8005568 <HAL_SPI_TransmitReceive+0x2a0>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	8879      	ldrh	r1, [r7, #2]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e8:	d107      	bne.n	80053fa <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	f240 80a2 	bls.w	8005548 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800540a:	e094      	b.n	8005536 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d120      	bne.n	800545c <HAL_SPI_TransmitReceive+0x194>
 800541a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01d      	beq.n	800545c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005420:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005422:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005428:	429a      	cmp	r2, r3
 800542a:	d217      	bcs.n	800545c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800545a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005464:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d065      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d118      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005482:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80054a8:	e045      	b.n	8005536 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80054aa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80054ac:	8bfb      	ldrh	r3, [r7, #30]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d21d      	bcs.n	80054ee <HAL_SPI_TransmitReceive+0x226>
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d018      	beq.n	80054ee <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80054ec:	e023      	b.n	8005536 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ee:	f7fb fb21 	bl	8000b34 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d803      	bhi.n	8005506 <HAL_SPI_TransmitReceive+0x23e>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005504:	d102      	bne.n	800550c <HAL_SPI_TransmitReceive+0x244>
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d114      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fa15 	bl	800593c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005518:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1fd      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005536:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f af67 	bne.w	800540c <HAL_SPI_TransmitReceive+0x144>
 800553e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f af63 	bne.w	800540c <HAL_SPI_TransmitReceive+0x144>
 8005546:	e1ce      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b07      	cmp	r3, #7
 800554e:	f240 81c2 	bls.w	80058d6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005558:	e0c9      	b.n	80056ee <HAL_SPI_TransmitReceive+0x426>
 800555a:	bf00      	nop
 800555c:	40013000 	.word	0x40013000
 8005560:	40003800 	.word	0x40003800
 8005564:	40003c00 	.word	0x40003c00
 8005568:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d11f      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x2f2>
 800557a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01c      	beq.n	80055ba <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005580:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005582:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005588:	429a      	cmp	r2, r3
 800558a:	d216      	bcs.n	80055ba <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80055c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8092 	beq.w	80056ee <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d118      	bne.n	800560a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	b292      	uxth	r2, r2
 80055e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e8:	1c9a      	adds	r2, r3, #2
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005606:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005608:	e071      	b.n	80056ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800560a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800560c:	8bfb      	ldrh	r3, [r7, #30]
 800560e:	429a      	cmp	r2, r3
 8005610:	d228      	bcs.n	8005664 <HAL_SPI_TransmitReceive+0x39c>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d023      	beq.n	8005664 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	8812      	ldrh	r2, [r2, #0]
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	8812      	ldrh	r2, [r2, #0]
 800563a:	b292      	uxth	r2, r2
 800563c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b02      	subs	r3, #2
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005660:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005662:	e044      	b.n	80056ee <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005664:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005666:	2b01      	cmp	r3, #1
 8005668:	d11d      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x3de>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d018      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	b292      	uxth	r2, r2
 800567e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80056a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80056a4:	e023      	b.n	80056ee <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a6:	f7fb fa45 	bl	8000b34 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d803      	bhi.n	80056be <HAL_SPI_TransmitReceive+0x3f6>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056bc:	d102      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x3fc>
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d114      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f939 	bl	800593c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e121      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f af3b 	bne.w	800556c <HAL_SPI_TransmitReceive+0x2a4>
 80056f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af37 	bne.w	800556c <HAL_SPI_TransmitReceive+0x2a4>
 80056fe:	e0f2      	b.n	80058e6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d121      	bne.n	8005752 <HAL_SPI_TransmitReceive+0x48a>
 800570e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01e      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005714:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005716:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800571c:	429a      	cmp	r2, r3
 800571e:	d218      	bcs.n	8005752 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3320      	adds	r3, #32
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005750:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800575a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80ba 	beq.w	80058d6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d11b      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057a6:	e096      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057aa:	8bfb      	ldrh	r3, [r7, #30]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d24a      	bcs.n	8005846 <HAL_SPI_TransmitReceive+0x57e>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d045      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e2:	7812      	ldrb	r2, [r2, #0]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057fe:	7812      	ldrb	r2, [r2, #0]
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b04      	subs	r3, #4
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005842:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005844:	e047      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005846:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005848:	2b03      	cmp	r3, #3
 800584a:	d820      	bhi.n	800588e <HAL_SPI_TransmitReceive+0x5c6>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01b      	beq.n	800588e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800588a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800588c:	e023      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588e:	f7fb f951 	bl	8000b34 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800589a:	429a      	cmp	r2, r3
 800589c:	d803      	bhi.n	80058a6 <HAL_SPI_TransmitReceive+0x5de>
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058a4:	d102      	bne.n	80058ac <HAL_SPI_TransmitReceive+0x5e4>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f845 	bl	800593c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e02d      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f af11 	bne.w	8005700 <HAL_SPI_TransmitReceive+0x438>
 80058de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f af0d 	bne.w	8005700 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	2200      	movs	r2, #0
 80058ee:	2108      	movs	r1, #8
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f8c3 	bl	8005a7c <SPI_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f815 	bl	800593c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005930:	2300      	movs	r3, #0
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3730      	adds	r7, #48	@ 0x30
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0210 	orr.w	r2, r2, #16
 800596a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6919      	ldr	r1, [r3, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b3c      	ldr	r3, [pc, #240]	@ (8005a78 <SPI_CloseTransfer+0x13c>)
 8005988:	400b      	ands	r3, r1
 800598a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800599a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d014      	beq.n	80059d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0220 	orr.w	r2, r2, #32
 80059d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d014      	beq.n	8005a08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a18:	f043 0201 	orr.w	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00f      	beq.n	8005a5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a42:	f043 0208 	orr.w	r2, r3, #8
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	fffffc90 	.word	0xfffffc90

08005a7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a8c:	e010      	b.n	8005ab0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8e:	f7fb f851 	bl	8000b34 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d803      	bhi.n	8005aa6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aa4:	d102      	bne.n	8005aac <SPI_WaitOnFlagUntilTimeout+0x30>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e00f      	b.n	8005ad0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	bf0c      	ite	eq
 8005ac0:	2301      	moveq	r3, #1
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d0df      	beq.n	8005a8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3307      	adds	r3, #7
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b10:	b084      	sub	sp, #16
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	f107 001c 	add.w	r0, r7, #28
 8005b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d121      	bne.n	8005b6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bec <USB_CoreInit+0xdc>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fafa 	bl	800715c <USB_CoreReset>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e01b      	b.n	8005ba6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 faee 	bl	800715c <USB_CoreReset>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b98:	e005      	b.n	8005ba6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba6:	7fbb      	ldrb	r3, [r7, #30]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d116      	bne.n	8005bda <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <USB_CoreInit+0xe0>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f043 0206 	orr.w	r2, r3, #6
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be6:	b004      	add	sp, #16
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	ffbdffbf 	.word	0xffbdffbf
 8005bf0:	03ee0000 	.word	0x03ee0000

08005bf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d165      	bne.n	8005cd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a41      	ldr	r2, [pc, #260]	@ (8005d10 <USB_SetTurnaroundTime+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d906      	bls.n	8005c1e <USB_SetTurnaroundTime+0x2a>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4a40      	ldr	r2, [pc, #256]	@ (8005d14 <USB_SetTurnaroundTime+0x120>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d202      	bcs.n	8005c1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c18:	230f      	movs	r3, #15
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e062      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a3c      	ldr	r2, [pc, #240]	@ (8005d14 <USB_SetTurnaroundTime+0x120>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d306      	bcc.n	8005c34 <USB_SetTurnaroundTime+0x40>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a3b      	ldr	r2, [pc, #236]	@ (8005d18 <USB_SetTurnaroundTime+0x124>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d202      	bcs.n	8005c34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c2e:	230e      	movs	r3, #14
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e057      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a38      	ldr	r2, [pc, #224]	@ (8005d18 <USB_SetTurnaroundTime+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d306      	bcc.n	8005c4a <USB_SetTurnaroundTime+0x56>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	@ (8005d1c <USB_SetTurnaroundTime+0x128>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d202      	bcs.n	8005c4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c44:	230d      	movs	r3, #13
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	e04c      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <USB_SetTurnaroundTime+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d306      	bcc.n	8005c60 <USB_SetTurnaroundTime+0x6c>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4a32      	ldr	r2, [pc, #200]	@ (8005d20 <USB_SetTurnaroundTime+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d802      	bhi.n	8005c60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c5a:	230c      	movs	r3, #12
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e041      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a2f      	ldr	r2, [pc, #188]	@ (8005d20 <USB_SetTurnaroundTime+0x12c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d906      	bls.n	8005c76 <USB_SetTurnaroundTime+0x82>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005d24 <USB_SetTurnaroundTime+0x130>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d802      	bhi.n	8005c76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c70:	230b      	movs	r3, #11
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e036      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a2a      	ldr	r2, [pc, #168]	@ (8005d24 <USB_SetTurnaroundTime+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d906      	bls.n	8005c8c <USB_SetTurnaroundTime+0x98>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4a29      	ldr	r2, [pc, #164]	@ (8005d28 <USB_SetTurnaroundTime+0x134>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d802      	bhi.n	8005c8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c86:	230a      	movs	r3, #10
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e02b      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4a26      	ldr	r2, [pc, #152]	@ (8005d28 <USB_SetTurnaroundTime+0x134>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d906      	bls.n	8005ca2 <USB_SetTurnaroundTime+0xae>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <USB_SetTurnaroundTime+0x138>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d202      	bcs.n	8005ca2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c9c:	2309      	movs	r3, #9
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e020      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4a21      	ldr	r2, [pc, #132]	@ (8005d2c <USB_SetTurnaroundTime+0x138>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d306      	bcc.n	8005cb8 <USB_SetTurnaroundTime+0xc4>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4a20      	ldr	r2, [pc, #128]	@ (8005d30 <USB_SetTurnaroundTime+0x13c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d802      	bhi.n	8005cb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e015      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <USB_SetTurnaroundTime+0x13c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d906      	bls.n	8005cce <USB_SetTurnaroundTime+0xda>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d34 <USB_SetTurnaroundTime+0x140>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d202      	bcs.n	8005cce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cc8:	2307      	movs	r3, #7
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e00a      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cce:	2306      	movs	r3, #6
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e007      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cda:	2309      	movs	r3, #9
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e001      	b.n	8005ce4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ce0:	2309      	movs	r3, #9
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	029b      	lsls	r3, r3, #10
 8005cf8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	00d8acbf 	.word	0x00d8acbf
 8005d14:	00e4e1c0 	.word	0x00e4e1c0
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	01067380 	.word	0x01067380
 8005d20:	011a499f 	.word	0x011a499f
 8005d24:	01312cff 	.word	0x01312cff
 8005d28:	014ca43f 	.word	0x014ca43f
 8005d2c:	016e3600 	.word	0x016e3600
 8005d30:	01a6ab1f 	.word	0x01a6ab1f
 8005d34:	01e84800 	.word	0x01e84800

08005d38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d115      	bne.n	8005dca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005daa:	200a      	movs	r0, #10
 8005dac:	f7fa fece 	bl	8000b4c <HAL_Delay>
      ms += 10U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	330a      	adds	r3, #10
 8005db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 f93f 	bl	800703a <USB_GetMode>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d01e      	beq.n	8005e00 <USB_SetCurrentMode+0x84>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dc6:	d9f0      	bls.n	8005daa <USB_SetCurrentMode+0x2e>
 8005dc8:	e01a      	b.n	8005e00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d115      	bne.n	8005dfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ddc:	200a      	movs	r0, #10
 8005dde:	f7fa feb5 	bl	8000b4c <HAL_Delay>
      ms += 10U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	330a      	adds	r3, #10
 8005de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f926 	bl	800703a <USB_GetMode>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <USB_SetCurrentMode+0x84>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005df8:	d9f0      	bls.n	8005ddc <USB_SetCurrentMode+0x60>
 8005dfa:	e001      	b.n	8005e00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e005      	b.n	8005e0c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e04:	d101      	bne.n	8005e0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e14:	b084      	sub	sp, #16
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b086      	sub	sp, #24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e009      	b.n	8005e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3340      	adds	r3, #64	@ 0x40
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	3301      	adds	r3, #1
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b0e      	cmp	r3, #14
 8005e4c:	d9f2      	bls.n	8005e34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d11c      	bne.n	8005e90 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e005      	b.n	8005e9c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10d      	bne.n	8005ecc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb8:	2100      	movs	r1, #0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f968 	bl	8006190 <USB_SetDevSpeed>
 8005ec0:	e008      	b.n	8005ed4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f963 	bl	8006190 <USB_SetDevSpeed>
 8005eca:	e003      	b.n	8005ed4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ecc:	2103      	movs	r1, #3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f95e 	bl	8006190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ed4:	2110      	movs	r1, #16
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f8fa 	bl	80060d0 <USB_FlushTxFifo>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f924 	bl	8006134 <USB_FlushRxFifo>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efc:	461a      	mov	r2, r3
 8005efe:	2300      	movs	r3, #0
 8005f00:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f08:	461a      	mov	r2, r3
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	e043      	b.n	8005fa8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f36:	d118      	bne.n	8005f6a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e013      	b.n	8005f7c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e008      	b.n	8005f7c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f76:	461a      	mov	r2, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f88:	461a      	mov	r2, r3
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fac:	461a      	mov	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d3b5      	bcc.n	8005f20 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e043      	b.n	8006042 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fd0:	d118      	bne.n	8006004 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e013      	b.n	8006016 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e008      	b.n	8006016 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	2300      	movs	r3, #0
 8006014:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	2300      	movs	r3, #0
 8006026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800603a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3301      	adds	r3, #1
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006046:	461a      	mov	r2, r3
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4293      	cmp	r3, r2
 800604c:	d3b5      	bcc.n	8005fba <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800605c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006060:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800606e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f043 0210 	orr.w	r2, r3, #16
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <USB_DevInit+0x2b4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006090:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f043 0208 	orr.w	r2, r3, #8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d105      	bne.n	80060b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <USB_DevInit+0x2b8>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c4:	b004      	add	sp, #16
 80060c6:	4770      	bx	lr
 80060c8:	803c3800 	.word	0x803c3800
 80060cc:	40000004 	.word	0x40000004

080060d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ea:	d901      	bls.n	80060f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e01b      	b.n	8006128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	daf2      	bge.n	80060de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	019b      	lsls	r3, r3, #6
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006114:	d901      	bls.n	800611a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e006      	b.n	8006128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0320 	and.w	r3, r3, #32
 8006122:	2b20      	cmp	r3, #32
 8006124:	d0f0      	beq.n	8006108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800614c:	d901      	bls.n	8006152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e018      	b.n	8006184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	daf2      	bge.n	8006140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2210      	movs	r2, #16
 8006162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006170:	d901      	bls.n	8006176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e006      	b.n	8006184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b10      	cmp	r3, #16
 8006180:	d0f0      	beq.n	8006164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061b0:	4313      	orrs	r3, r2
 80061b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b087      	sub	sp, #28
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0306 	and.w	r3, r3, #6
 80061da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
 80061e6:	e00a      	b.n	80061fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d002      	beq.n	80061f4 <USB_GetDevSpeed+0x32>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d102      	bne.n	80061fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061f4:	2302      	movs	r3, #2
 80061f6:	75fb      	strb	r3, [r7, #23]
 80061f8:	e001      	b.n	80061fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061fa:	230f      	movs	r3, #15
 80061fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d139      	bne.n	800629c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006246:	4313      	orrs	r3, r2
 8006248:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d153      	bne.n	8006308 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800627c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	059b      	lsls	r3, r3, #22
 8006282:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006284:	431a      	orrs	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	0159      	lsls	r1, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	440b      	add	r3, r1
 800628e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006292:	4619      	mov	r1, r3
 8006294:	4b20      	ldr	r3, [pc, #128]	@ (8006318 <USB_ActivateEndpoint+0x10c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
 800629a:	e035      	b.n	8006308 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d119      	bne.n	8006308 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	791b      	ldrb	r3, [r3, #4]
 80062ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062f0:	430b      	orrs	r3, r1
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	0159      	lsls	r1, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	4619      	mov	r1, r3
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <USB_ActivateEndpoint+0x10c>)
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	10008000 	.word	0x10008000

0800631c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d161      	bne.n	80063fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800634a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634e:	d11f      	bne.n	8006390 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800636e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800638a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006396:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	2101      	movs	r1, #1
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063b0:	4013      	ands	r3, r2
 80063b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d4:	4013      	ands	r3, r2
 80063d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	0159      	lsls	r1, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f2:	4619      	mov	r1, r3
 80063f4:	4b35      	ldr	r3, [pc, #212]	@ (80064cc <USB_DeactivateEndpoint+0x1b0>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]
 80063fa:	e060      	b.n	80064be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800640e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006412:	d11f      	bne.n	8006454 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800642e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006432:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800644e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	43db      	mvns	r3, r3
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006474:	4013      	ands	r3, r2
 8006476:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	43db      	mvns	r3, r3
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006498:	4013      	ands	r3, r2
 800649a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b6:	4619      	mov	r1, r3
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <USB_DeactivateEndpoint+0x1b4>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	ec337800 	.word	0xec337800
 80064d0:	eff37800 	.word	0xeff37800

080064d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	@ 0x28
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 8185 	bne.w	8006800 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d132      	bne.n	8006564 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	0159      	lsls	r1, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	440b      	add	r3, r1
 8006514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006518:	4619      	mov	r1, r3
 800651a:	4ba7      	ldr	r3, [pc, #668]	@ (80067b8 <USB_EPStartXfer+0x2e4>)
 800651c:	4013      	ands	r3, r2
 800651e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800653a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800653e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654c:	691a      	ldr	r2, [r3, #16]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	0159      	lsls	r1, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	440b      	add	r3, r1
 8006556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655a:	4619      	mov	r1, r3
 800655c:	4b97      	ldr	r3, [pc, #604]	@ (80067bc <USB_EPStartXfer+0x2e8>)
 800655e:	4013      	ands	r3, r2
 8006560:	610b      	str	r3, [r1, #16]
 8006562:	e097      	b.n	8006694 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	0159      	lsls	r1, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	440b      	add	r3, r1
 800657a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657e:	4619      	mov	r1, r3
 8006580:	4b8e      	ldr	r3, [pc, #568]	@ (80067bc <USB_EPStartXfer+0x2e8>)
 8006582:	4013      	ands	r3, r2
 8006584:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	0159      	lsls	r1, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	440b      	add	r3, r1
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	4619      	mov	r1, r3
 80065a2:	4b85      	ldr	r3, [pc, #532]	@ (80067b8 <USB_EPStartXfer+0x2e4>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11a      	bne.n	80065e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065e0:	6113      	str	r3, [r2, #16]
 80065e2:	e044      	b.n	800666e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	1e5a      	subs	r2, r3, #1
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	8afb      	ldrh	r3, [r7, #22]
 800660a:	04d9      	lsls	r1, r3, #19
 800660c:	4b6c      	ldr	r3, [pc, #432]	@ (80067c0 <USB_EPStartXfer+0x2ec>)
 800660e:	400b      	ands	r3, r1
 8006610:	69b9      	ldr	r1, [r7, #24]
 8006612:	0148      	lsls	r0, r1, #5
 8006614:	69f9      	ldr	r1, [r7, #28]
 8006616:	4401      	add	r1, r0
 8006618:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800661c:	4313      	orrs	r3, r2
 800661e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	791b      	ldrb	r3, [r3, #4]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d122      	bne.n	800666e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006642:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006646:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	8afb      	ldrh	r3, [r7, #22]
 8006658:	075b      	lsls	r3, r3, #29
 800665a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800665e:	69b9      	ldr	r1, [r7, #24]
 8006660:	0148      	lsls	r0, r1, #5
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	4401      	add	r1, r0
 8006666:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800666a:	4313      	orrs	r3, r2
 800666c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	0148      	lsls	r0, r1, #5
 8006688:	69f9      	ldr	r1, [r7, #28]
 800668a:	4401      	add	r1, r0
 800668c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006690:	4313      	orrs	r3, r2
 8006692:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d14b      	bne.n	8006732 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ae:	461a      	mov	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	791b      	ldrb	r3, [r3, #4]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d128      	bne.n	8006710 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d110      	bne.n	80066f0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e00f      	b.n	8006710 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	0151      	lsls	r1, r2, #5
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	440a      	add	r2, r1
 8006706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800670e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800672a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e169      	b.n	8006a06 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800674c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006750:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	791b      	ldrb	r3, [r3, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d015      	beq.n	8006786 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8151 	beq.w	8006a06 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	2101      	movs	r1, #1
 8006776:	fa01 f303 	lsl.w	r3, r1, r3
 800677a:	69f9      	ldr	r1, [r7, #28]
 800677c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006780:	4313      	orrs	r3, r2
 8006782:	634b      	str	r3, [r1, #52]	@ 0x34
 8006784:	e13f      	b.n	8006a06 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	2b00      	cmp	r3, #0
 8006794:	d116      	bne.n	80067c4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e015      	b.n	80067e4 <USB_EPStartXfer+0x310>
 80067b8:	e007ffff 	.word	0xe007ffff
 80067bc:	fff80000 	.word	0xfff80000
 80067c0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	68d9      	ldr	r1, [r3, #12]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	b298      	uxth	r0, r3
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4603      	mov	r3, r0
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f9b9 	bl	8006b70 <USB_WritePacket>
 80067fe:	e102      	b.n	8006a06 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	0159      	lsls	r1, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	440b      	add	r3, r1
 8006816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681a:	4619      	mov	r1, r3
 800681c:	4b7c      	ldr	r3, [pc, #496]	@ (8006a10 <USB_EPStartXfer+0x53c>)
 800681e:	4013      	ands	r3, r2
 8006820:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	0159      	lsls	r1, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	440b      	add	r3, r1
 8006838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683c:	4619      	mov	r1, r3
 800683e:	4b75      	ldr	r3, [pc, #468]	@ (8006a14 <USB_EPStartXfer+0x540>)
 8006840:	4013      	ands	r3, r2
 8006842:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d12f      	bne.n	80068aa <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006878:	69b9      	ldr	r1, [r7, #24]
 800687a:	0148      	lsls	r0, r1, #5
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	4401      	add	r1, r0
 8006880:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	440a      	add	r2, r1
 800689e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068a6:	6113      	str	r3, [r2, #16]
 80068a8:	e05f      	b.n	800696a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d123      	bne.n	80068fa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c8:	69b9      	ldr	r1, [r7, #24]
 80068ca:	0148      	lsls	r0, r1, #5
 80068cc:	69f9      	ldr	r1, [r7, #28]
 80068ce:	4401      	add	r1, r0
 80068d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068d4:	4313      	orrs	r3, r2
 80068d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068f6:	6113      	str	r3, [r2, #16]
 80068f8:	e037      	b.n	800696a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4413      	add	r3, r2
 8006904:	1e5a      	subs	r2, r3, #1
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	fbb2 f3f3 	udiv	r3, r2, r3
 800690e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	8afa      	ldrh	r2, [r7, #22]
 8006916:	fb03 f202 	mul.w	r2, r3, r2
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	8afb      	ldrh	r3, [r7, #22]
 800692e:	04d9      	lsls	r1, r3, #19
 8006930:	4b39      	ldr	r3, [pc, #228]	@ (8006a18 <USB_EPStartXfer+0x544>)
 8006932:	400b      	ands	r3, r1
 8006934:	69b9      	ldr	r1, [r7, #24]
 8006936:	0148      	lsls	r0, r1, #5
 8006938:	69f9      	ldr	r1, [r7, #28]
 800693a:	4401      	add	r1, r0
 800693c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006940:	4313      	orrs	r3, r2
 8006942:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695a:	69b9      	ldr	r1, [r7, #24]
 800695c:	0148      	lsls	r0, r1, #5
 800695e:	69f9      	ldr	r1, [r7, #28]
 8006960:	4401      	add	r1, r0
 8006962:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006966:	4313      	orrs	r3, r2
 8006968:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10d      	bne.n	800698c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	68d9      	ldr	r1, [r3, #12]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006988:	460a      	mov	r2, r1
 800698a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	791b      	ldrb	r3, [r3, #4]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d128      	bne.n	80069e6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d110      	bne.n	80069c6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e00f      	b.n	80069e6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	fff80000 	.word	0xfff80000
 8006a14:	e007ffff 	.word	0xe007ffff
 8006a18:	1ff80000 	.word	0x1ff80000

08006a1c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d14a      	bne.n	8006ad0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a52:	f040 8086 	bne.w	8006b62 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a78:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	7812      	ldrb	r2, [r2, #0]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d902      	bls.n	8006ab4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab2:	e056      	b.n	8006b62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006acc:	d0e7      	beq.n	8006a9e <USB_EPStopXfer+0x82>
 8006ace:	e048      	b.n	8006b62 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ae8:	d13b      	bne.n	8006b62 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b0c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d902      	bls.n	8006b48 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
          break;
 8006b46:	e00c      	b.n	8006b62 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b60:	d0e7      	beq.n	8006b32 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b089      	sub	sp, #36	@ 0x24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	460b      	mov	r3, r1
 8006b80:	71fb      	strb	r3, [r7, #7]
 8006b82:	4613      	mov	r3, r2
 8006b84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d123      	bne.n	8006bde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b96:	88bb      	ldrh	r3, [r7, #4]
 8006b98:	3303      	adds	r3, #3
 8006b9a:	089b      	lsrs	r3, r3, #2
 8006b9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	e018      	b.n	8006bd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	031a      	lsls	r2, r3, #12
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d3e2      	bcc.n	8006ba4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3724      	adds	r7, #36	@ 0x24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b08b      	sub	sp, #44	@ 0x2c
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	089b      	lsrs	r3, r3, #2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c12:	2300      	movs	r3, #0
 8006c14:	623b      	str	r3, [r7, #32]
 8006c16:	e014      	b.n	8006c42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	3301      	adds	r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	3301      	adds	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	3301      	adds	r3, #1
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	6a3a      	ldr	r2, [r7, #32]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3e6      	bcc.n	8006c18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	701a      	strb	r2, [r3, #0]
      i++;
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	3301      	adds	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006c82:	8bfb      	ldrh	r3, [r7, #30]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c88:	8bfb      	ldrh	r3, [r7, #30]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ea      	bne.n	8006c64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	372c      	adds	r7, #44	@ 0x2c
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d12c      	bne.n	8006d12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	db12      	blt.n	8006cf0 <USB_EPSetStall+0x54>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00f      	beq.n	8006cf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	0151      	lsls	r1, r2, #5
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	440a      	add	r2, r1
 8006d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e02b      	b.n	8006d6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db12      	blt.n	8006d4a <USB_EPSetStall+0xae>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d128      	bne.n	8006de6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006db2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d003      	beq.n	8006dc4 <USB_EPClearStall+0x4c>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d138      	bne.n	8006e36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	e027      	b.n	8006e36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	791b      	ldrb	r3, [r3, #4]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d003      	beq.n	8006e16 <USB_EPClearStall+0x9e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d10f      	bne.n	8006e36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ebe:	f023 0302 	bic.w	r3, r3, #2
 8006ec2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f00:	f043 0302 	orr.w	r3, r3, #2
 8006f04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	0c1b      	lsrs	r3, r3, #16
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	b29b      	uxth	r3, r3
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fb2:	78fb      	ldrb	r3, [r7, #3]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007000:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	01db      	lsls	r3, r3, #7
 8007010:	b2db      	uxtb	r3, r3
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4013      	ands	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800702c:	68bb      	ldr	r3, [r7, #8]
}
 800702e:	4618      	mov	r0, r3
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	f003 0301 	and.w	r3, r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007072:	4619      	mov	r1, r3
 8007074:	4b09      	ldr	r3, [pc, #36]	@ (800709c <USB_ActivateSetup+0x44>)
 8007076:	4013      	ands	r3, r2
 8007078:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800708c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	fffff800 	.word	0xfffff800

080070a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	460b      	mov	r3, r1
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	333c      	adds	r3, #60	@ 0x3c
 80070b6:	3304      	adds	r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4a26      	ldr	r2, [pc, #152]	@ (8007158 <USB_EP0_OutStart+0xb8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d90a      	bls.n	80070da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070d4:	d101      	bne.n	80070da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e037      	b.n	800714a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e0:	461a      	mov	r2, r3
 80070e2:	2300      	movs	r3, #0
 80070e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007108:	f043 0318 	orr.w	r3, r3, #24
 800710c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007120:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10f      	bne.n	8007148 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007142:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	4f54300a 	.word	0x4f54300a

0800715c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3301      	adds	r3, #1
 800716c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007174:	d901      	bls.n	800717a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e01b      	b.n	80071b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	daf2      	bge.n	8007168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f043 0201 	orr.w	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800719e:	d901      	bls.n	80071a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d0f0      	beq.n	8007192 <USB_CoreReset+0x36>

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80071d0:	f002 fc84 	bl	8009adc <USBD_static_malloc>
 80071d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d109      	bne.n	80071f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32b0      	adds	r2, #176	@ 0xb0
 80071e6:	2100      	movs	r1, #0
 80071e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0d4      	b.n	800739a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80071f4:	2100      	movs	r1, #0
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f002 fcb4 	bl	8009b64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32b0      	adds	r2, #176	@ 0xb0
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32b0      	adds	r2, #176	@ 0xb0
 8007216:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7c1b      	ldrb	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d138      	bne.n	800729a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007228:	4b5e      	ldr	r3, [pc, #376]	@ (80073a4 <USBD_CDC_Init+0x1e4>)
 800722a:	7819      	ldrb	r1, [r3, #0]
 800722c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007230:	2202      	movs	r2, #2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 fb2f 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007238:	4b5a      	ldr	r3, [pc, #360]	@ (80073a4 <USBD_CDC_Init+0x1e4>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	3324      	adds	r3, #36	@ 0x24
 800724e:	2201      	movs	r2, #1
 8007250:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007252:	4b55      	ldr	r3, [pc, #340]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800725a:	2202      	movs	r2, #2
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 fb1a 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007262:	4b51      	ldr	r3, [pc, #324]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 020f 	and.w	r2, r3, #15
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800727a:	2201      	movs	r2, #1
 800727c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800727e:	4b4b      	ldr	r3, [pc, #300]	@ (80073ac <USBD_CDC_Init+0x1ec>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 020f 	and.w	r2, r3, #15
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	3326      	adds	r3, #38	@ 0x26
 8007294:	2210      	movs	r2, #16
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e035      	b.n	8007306 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800729a:	4b42      	ldr	r3, [pc, #264]	@ (80073a4 <USBD_CDC_Init+0x1e4>)
 800729c:	7819      	ldrb	r1, [r3, #0]
 800729e:	2340      	movs	r3, #64	@ 0x40
 80072a0:	2202      	movs	r2, #2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 faf7 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072a8:	4b3e      	ldr	r3, [pc, #248]	@ (80073a4 <USBD_CDC_Init+0x1e4>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3324      	adds	r3, #36	@ 0x24
 80072be:	2201      	movs	r2, #1
 80072c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072c2:	4b39      	ldr	r3, [pc, #228]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 80072c4:	7819      	ldrb	r1, [r3, #0]
 80072c6:	2340      	movs	r3, #64	@ 0x40
 80072c8:	2202      	movs	r2, #2
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f002 fae3 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072d0:	4b35      	ldr	r3, [pc, #212]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072e8:	2201      	movs	r2, #1
 80072ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072ec:	4b2f      	ldr	r3, [pc, #188]	@ (80073ac <USBD_CDC_Init+0x1ec>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 020f 	and.w	r2, r3, #15
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	3326      	adds	r3, #38	@ 0x26
 8007302:	2210      	movs	r2, #16
 8007304:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007306:	4b29      	ldr	r3, [pc, #164]	@ (80073ac <USBD_CDC_Init+0x1ec>)
 8007308:	7819      	ldrb	r1, [r3, #0]
 800730a:	2308      	movs	r3, #8
 800730c:	2203      	movs	r2, #3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 fac1 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007314:	4b25      	ldr	r3, [pc, #148]	@ (80073ac <USBD_CDC_Init+0x1ec>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3324      	adds	r3, #36	@ 0x24
 800732a:	2201      	movs	r2, #1
 800732c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	33b0      	adds	r3, #176	@ 0xb0
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007364:	2302      	movs	r3, #2
 8007366:	e018      	b.n	800739a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7c1b      	ldrb	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007370:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 8007372:	7819      	ldrb	r1, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800737a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f002 fb78 	bl	8009a74 <USBD_LL_PrepareReceive>
 8007384:	e008      	b.n	8007398 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <USBD_CDC_Init+0x1e8>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007390:	2340      	movs	r3, #64	@ 0x40
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f002 fb6e 	bl	8009a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	24000097 	.word	0x24000097
 80073a8:	24000098 	.word	0x24000098
 80073ac:	24000099 	.word	0x24000099

080073b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073bc:	4b3a      	ldr	r3, [pc, #232]	@ (80074a8 <USBD_CDC_DeInit+0xf8>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 fa8d 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073c8:	4b37      	ldr	r3, [pc, #220]	@ (80074a8 <USBD_CDC_DeInit+0xf8>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	6879      	ldr	r1, [r7, #4]
 80073d2:	4613      	mov	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	3324      	adds	r3, #36	@ 0x24
 80073de:	2200      	movs	r2, #0
 80073e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073e2:	4b32      	ldr	r3, [pc, #200]	@ (80074ac <USBD_CDC_DeInit+0xfc>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f002 fa7a 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073ee:	4b2f      	ldr	r3, [pc, #188]	@ (80074ac <USBD_CDC_DeInit+0xfc>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007406:	2200      	movs	r2, #0
 8007408:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800740a:	4b29      	ldr	r3, [pc, #164]	@ (80074b0 <USBD_CDC_DeInit+0x100>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f002 fa66 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007416:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <USBD_CDC_DeInit+0x100>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	f003 020f 	and.w	r2, r3, #15
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	3324      	adds	r3, #36	@ 0x24
 800742c:	2200      	movs	r2, #0
 800742e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007430:	4b1f      	ldr	r3, [pc, #124]	@ (80074b0 <USBD_CDC_DeInit+0x100>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	3326      	adds	r3, #38	@ 0x26
 8007446:	2200      	movs	r2, #0
 8007448:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	32b0      	adds	r2, #176	@ 0xb0
 8007454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d01f      	beq.n	800749c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	33b0      	adds	r3, #176	@ 0xb0
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	32b0      	adds	r2, #176	@ 0xb0
 800747a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747e:	4618      	mov	r0, r3
 8007480:	f002 fb3a 	bl	8009af8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	32b0      	adds	r2, #176	@ 0xb0
 800748e:	2100      	movs	r1, #0
 8007490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	24000097 	.word	0x24000097
 80074ac:	24000098 	.word	0x24000098
 80074b0:	24000099 	.word	0x24000099

080074b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	32b0      	adds	r2, #176	@ 0xb0
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e0bf      	b.n	8007664 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d050      	beq.n	8007592 <USBD_CDC_Setup+0xde>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	f040 80af 	bne.w	8007654 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d03a      	beq.n	8007574 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b25b      	sxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	da1b      	bge.n	8007540 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	33b0      	adds	r3, #176	@ 0xb0
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800751e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	88d2      	ldrh	r2, [r2, #6]
 8007524:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b07      	cmp	r3, #7
 800752c:	bf28      	it	cs
 800752e:	2307      	movcs	r3, #7
 8007530:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	89fa      	ldrh	r2, [r7, #14]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fd7d 	bl	8009038 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800753e:	e090      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	785a      	ldrb	r2, [r3, #1]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007550:	d803      	bhi.n	800755a <USBD_CDC_Setup+0xa6>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	b2da      	uxtb	r2, r3
 8007558:	e000      	b.n	800755c <USBD_CDC_Setup+0xa8>
 800755a:	2240      	movs	r2, #64	@ 0x40
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007562:	6939      	ldr	r1, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800756a:	461a      	mov	r2, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fd8f 	bl	8009090 <USBD_CtlPrepareRx>
      break;
 8007572:	e076      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	33b0      	adds	r3, #176	@ 0xb0
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	7850      	ldrb	r0, [r2, #1]
 800758a:	2200      	movs	r2, #0
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	4798      	blx	r3
      break;
 8007590:	e067      	b.n	8007662 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b0b      	cmp	r3, #11
 8007598:	d851      	bhi.n	800763e <USBD_CDC_Setup+0x18a>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <USBD_CDC_Setup+0xec>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075d1 	.word	0x080075d1
 80075a4:	0800764d 	.word	0x0800764d
 80075a8:	0800763f 	.word	0x0800763f
 80075ac:	0800763f 	.word	0x0800763f
 80075b0:	0800763f 	.word	0x0800763f
 80075b4:	0800763f 	.word	0x0800763f
 80075b8:	0800763f 	.word	0x0800763f
 80075bc:	0800763f 	.word	0x0800763f
 80075c0:	0800763f 	.word	0x0800763f
 80075c4:	0800763f 	.word	0x0800763f
 80075c8:	080075fb 	.word	0x080075fb
 80075cc:	08007625 	.word	0x08007625
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d107      	bne.n	80075ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075dc:	f107 030a 	add.w	r3, r7, #10
 80075e0:	2202      	movs	r2, #2
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fd27 	bl	8009038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ea:	e032      	b.n	8007652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f001 fca5 	bl	8008f3e <USBD_CtlError>
            ret = USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	75fb      	strb	r3, [r7, #23]
          break;
 80075f8:	e02b      	b.n	8007652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d107      	bne.n	8007616 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007606:	f107 030d 	add.w	r3, r7, #13
 800760a:	2201      	movs	r2, #1
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fd12 	bl	8009038 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007614:	e01d      	b.n	8007652 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 fc90 	bl	8008f3e <USBD_CtlError>
            ret = USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	75fb      	strb	r3, [r7, #23]
          break;
 8007622:	e016      	b.n	8007652 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b03      	cmp	r3, #3
 800762e:	d00f      	beq.n	8007650 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fc83 	bl	8008f3e <USBD_CtlError>
            ret = USBD_FAIL;
 8007638:	2303      	movs	r3, #3
 800763a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800763c:	e008      	b.n	8007650 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fc7c 	bl	8008f3e <USBD_CtlError>
          ret = USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	75fb      	strb	r3, [r7, #23]
          break;
 800764a:	e002      	b.n	8007652 <USBD_CDC_Setup+0x19e>
          break;
 800764c:	bf00      	nop
 800764e:	e008      	b.n	8007662 <USBD_CDC_Setup+0x1ae>
          break;
 8007650:	bf00      	nop
      }
      break;
 8007652:	e006      	b.n	8007662 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fc71 	bl	8008f3e <USBD_CtlError>
      ret = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	bf00      	nop
  }

  return (uint8_t)ret;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800767e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32b0      	adds	r2, #176	@ 0xb0
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007692:	2303      	movs	r3, #3
 8007694:	e065      	b.n	8007762 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	32b0      	adds	r2, #176	@ 0xb0
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	3318      	adds	r3, #24
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02f      	beq.n	8007720 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 020f 	and.w	r2, r3, #15
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	3318      	adds	r3, #24
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 010f 	and.w	r1, r3, #15
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	460b      	mov	r3, r1
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	440b      	add	r3, r1
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4403      	add	r3, r0
 80076e8:	331c      	adds	r3, #28
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d112      	bne.n	8007720 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	f003 020f 	and.w	r2, r3, #15
 8007700:	6879      	ldr	r1, [r7, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	3318      	adds	r3, #24
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007712:	78f9      	ldrb	r1, [r7, #3]
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f002 f98a 	bl	8009a32 <USBD_LL_Transmit>
 800771e:	e01f      	b.n	8007760 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	33b0      	adds	r3, #176	@ 0xb0
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d010      	beq.n	8007760 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	33b0      	adds	r3, #176	@ 0xb0
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	32b0      	adds	r2, #176	@ 0xb0
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	32b0      	adds	r2, #176	@ 0xb0
 8007790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e01a      	b.n	80077d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 f988 	bl	8009ab6 <USBD_LL_GetRxDataSize>
 80077a6:	4602      	mov	r2, r0
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	33b0      	adds	r3, #176	@ 0xb0
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80077cc:	4611      	mov	r1, r2
 80077ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	32b0      	adds	r2, #176	@ 0xb0
 80077ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e024      	b.n	8007846 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	33b0      	adds	r3, #176	@ 0xb0
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d019      	beq.n	8007844 <USBD_CDC_EP0_RxReady+0x6a>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007816:	2bff      	cmp	r3, #255	@ 0xff
 8007818:	d014      	beq.n	8007844 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	33b0      	adds	r3, #176	@ 0xb0
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007832:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800783a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22ff      	movs	r2, #255	@ 0xff
 8007840:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007858:	2182      	movs	r1, #130	@ 0x82
 800785a:	4818      	ldr	r0, [pc, #96]	@ (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800785c:	f000 fd0f 	bl	800827e <USBD_GetEpDesc>
 8007860:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007862:	2101      	movs	r1, #1
 8007864:	4815      	ldr	r0, [pc, #84]	@ (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007866:	f000 fd0a 	bl	800827e <USBD_GetEpDesc>
 800786a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800786c:	2181      	movs	r1, #129	@ 0x81
 800786e:	4813      	ldr	r0, [pc, #76]	@ (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007870:	f000 fd05 	bl	800827e <USBD_GetEpDesc>
 8007874:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2210      	movs	r2, #16
 8007880:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2200      	movs	r2, #0
 800788c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007890:	711a      	strb	r2, [r3, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d006      	beq.n	80078aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078a4:	711a      	strb	r2, [r3, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2243      	movs	r2, #67	@ 0x43
 80078ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078b0:	4b02      	ldr	r3, [pc, #8]	@ (80078bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	24000054 	.word	0x24000054

080078c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078c8:	2182      	movs	r1, #130	@ 0x82
 80078ca:	4818      	ldr	r0, [pc, #96]	@ (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078cc:	f000 fcd7 	bl	800827e <USBD_GetEpDesc>
 80078d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078d2:	2101      	movs	r1, #1
 80078d4:	4815      	ldr	r0, [pc, #84]	@ (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078d6:	f000 fcd2 	bl	800827e <USBD_GetEpDesc>
 80078da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078dc:	2181      	movs	r1, #129	@ 0x81
 80078de:	4813      	ldr	r0, [pc, #76]	@ (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078e0:	f000 fccd 	bl	800827e <USBD_GetEpDesc>
 80078e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2210      	movs	r2, #16
 80078f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	711a      	strb	r2, [r3, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f042 0202 	orr.w	r2, r2, #2
 8007904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	711a      	strb	r2, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f042 0202 	orr.w	r2, r2, #2
 8007918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2243      	movs	r2, #67	@ 0x43
 800791e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007920:	4b02      	ldr	r3, [pc, #8]	@ (800792c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	24000054 	.word	0x24000054

08007930 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007938:	2182      	movs	r1, #130	@ 0x82
 800793a:	4818      	ldr	r0, [pc, #96]	@ (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800793c:	f000 fc9f 	bl	800827e <USBD_GetEpDesc>
 8007940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007942:	2101      	movs	r1, #1
 8007944:	4815      	ldr	r0, [pc, #84]	@ (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007946:	f000 fc9a 	bl	800827e <USBD_GetEpDesc>
 800794a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800794c:	2181      	movs	r1, #129	@ 0x81
 800794e:	4813      	ldr	r0, [pc, #76]	@ (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007950:	f000 fc95 	bl	800827e <USBD_GetEpDesc>
 8007954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2210      	movs	r2, #16
 8007960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2200      	movs	r2, #0
 800796c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007970:	711a      	strb	r2, [r3, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d006      	beq.n	800798a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007984:	711a      	strb	r2, [r3, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2243      	movs	r2, #67	@ 0x43
 800798e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007990:	4b02      	ldr	r3, [pc, #8]	@ (800799c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	24000054 	.word	0x24000054

080079a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	220a      	movs	r2, #10
 80079ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079ae:	4b03      	ldr	r3, [pc, #12]	@ (80079bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	24000010 	.word	0x24000010

080079c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e009      	b.n	80079e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	33b0      	adds	r3, #176	@ 0xb0
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	32b0      	adds	r2, #176	@ 0xb0
 8007a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e008      	b.n	8007a2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	32b0      	adds	r2, #176	@ 0xb0
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e004      	b.n	8007a66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
	...

08007a74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	@ 0xb0
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	@ 0xb0
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e018      	b.n	8007ad4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 ffdb 	bl	8009a74 <USBD_LL_PrepareReceive>
 8007abe:	e008      	b.n	8007ad2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac0:	4b06      	ldr	r3, [pc, #24]	@ (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007aca:	2340      	movs	r3, #64	@ 0x40
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ffd1 	bl	8009a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	24000098 	.word	0x24000098

08007ae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e01f      	b.n	8007b38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 fe45 	bl	80097bc <USBD_LL_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e025      	b.n	8007ba4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	@ 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32ae      	adds	r2, #174	@ 0xae
 8007b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	f107 020e 	add.w	r2, r7, #14
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fe53 	bl	8009860 <USBD_LL_Start>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f936 	bl	8008eca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d01a      	beq.n	8007cb8 <USBD_LL_SetupStage+0x72>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d822      	bhi.n	8007ccc <USBD_LL_SetupStage+0x86>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USBD_LL_SetupStage+0x4a>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00a      	beq.n	8007ca4 <USBD_LL_SetupStage+0x5e>
 8007c8e:	e01d      	b.n	8007ccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb63 	bl	8008364 <USBD_StdDevReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e020      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbcb 	bl	8008448 <USBD_StdItfReq>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb6:	e016      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fc2d 	bl	8008520 <USBD_StdEPReq>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cca:	e00c      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fe20 	bl	8009920 <USBD_LL_StallEP>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	bf00      	nop
  }

  return ret;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d16e      	bne.n	8007de6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f040 8098 	bne.w	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d913      	bls.n	8007d50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf28      	it	cs
 8007d42:	4613      	movcs	r3, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 f9be 	bl	80090ca <USBD_CtlContinueRx>
 8007d4e:	e07d      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d014      	beq.n	8007d88 <USBD_LL_DataOutStage+0x98>
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d81d      	bhi.n	8007d9e <USBD_LL_DataOutStage+0xae>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <USBD_LL_DataOutStage+0x7c>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d003      	beq.n	8007d72 <USBD_LL_DataOutStage+0x82>
 8007d6a:	e018      	b.n	8007d9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8007d70:	e018      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fa64 	bl	800824a <USBD_CoreFindIF>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75bb      	strb	r3, [r7, #22]
            break;
 8007d86:	e00d      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fa66 	bl	8008264 <USBD_CoreFindEP>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d9c:	e002      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75bb      	strb	r3, [r7, #22]
            break;
 8007da2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d119      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d113      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007db6:	7dba      	ldrb	r2, [r7, #22]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	32ae      	adds	r2, #174	@ 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dc6:	7dba      	ldrb	r2, [r7, #22]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	@ 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 f984 	bl	80090ec <USBD_CtlSendStatus>
 8007de4:	e032      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa37 	bl	8008264 <USBD_CoreFindEP>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	2bff      	cmp	r3, #255	@ 0xff
 8007dfe:	d025      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
 8007e00:	7dbb      	ldrb	r3, [r7, #22]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d122      	bne.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d117      	bne.n	8007e42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e12:	7dba      	ldrb	r2, [r7, #22]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	32ae      	adds	r2, #174	@ 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00f      	beq.n	8007e42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e22:	7dba      	ldrb	r2, [r7, #22]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	32ae      	adds	r2, #174	@ 0xae
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	7afa      	ldrb	r2, [r7, #11]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	4798      	blx	r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	e000      	b.n	8007e4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d16f      	bne.n	8007f4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d15a      	bne.n	8007f30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d914      	bls.n	8007eb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 f8e6 	bl	800906e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fde3 	bl	8009a74 <USBD_LL_PrepareReceive>
 8007eae:	e03f      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d11c      	bne.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d316      	bcc.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d20f      	bcs.n	8007ef6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f001 f8c7 	bl	800906e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2200      	movs	r2, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 fdc0 	bl	8009a74 <USBD_LL_PrepareReceive>
 8007ef4:	e01c      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d10f      	bne.n	8007f22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f22:	2180      	movs	r1, #128	@ 0x80
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fcfb 	bl	8009920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 f8f1 	bl	8009112 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03a      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fe42 	bl	8007bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f48:	e032      	b.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f985 	bl	8008264 <USBD_CoreFindEP>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2bff      	cmp	r3, #255	@ 0xff
 8007f62:	d025      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d11c      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f76:	7dfa      	ldrb	r2, [r7, #23]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	32ae      	adds	r2, #174	@ 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d014      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f86:	7dfa      	ldrb	r2, [r7, #23]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	@ 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	7afa      	ldrb	r2, [r7, #11]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	e000      	b.n	8007fb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d014      	beq.n	8008020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6852      	ldr	r2, [r2, #4]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	4611      	mov	r1, r2
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008020:	2340      	movs	r3, #64	@ 0x40
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fc35 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2240      	movs	r2, #64	@ 0x40
 8008038:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803c:	2340      	movs	r3, #64	@ 0x40
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	@ 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fc27 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2240      	movs	r2, #64	@ 0x40
 8008052:	621a      	str	r2, [r3, #32]

  return ret;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b04      	cmp	r3, #4
 8008090:	d006      	beq.n	80080a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008098:	b2da      	uxtb	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2204      	movs	r2, #4
 80080a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d106      	bne.n	80080d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d110      	bne.n	800811c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32ae      	adds	r2, #174	@ 0xae
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e01c      	b.n	8008182 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d115      	bne.n	8008180 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	@ 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	@ 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4611      	mov	r1, r2
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	32ae      	adds	r2, #174	@ 0xae
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e01c      	b.n	80081e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d115      	bne.n	80081e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32ae      	adds	r2, #174	@ 0xae
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32ae      	adds	r2, #174	@ 0xae
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	4611      	mov	r1, r2
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6852      	ldr	r2, [r2, #4]
 800822e:	b2d2      	uxtb	r2, r2
 8008230:	4611      	mov	r1, r2
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800823c:	2303      	movs	r3, #3
 800823e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	b29b      	uxth	r3, r3
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d91f      	bls.n	80082e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082aa:	e013      	b.n	80082d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082ac:	f107 030a 	add.w	r3, r7, #10
 80082b0:	4619      	mov	r1, r3
 80082b2:	6978      	ldr	r0, [r7, #20]
 80082b4:	f000 f81b 	bl	80082ee <USBD_GetNextDesc>
 80082b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d108      	bne.n	80082d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d008      	beq.n	80082e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	885b      	ldrh	r3, [r3, #2]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	897b      	ldrh	r3, [r7, #10]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d8e5      	bhi.n	80082ac <USBD_GetEpDesc+0x2e>
 80082e0:	e000      	b.n	80082e4 <USBD_GetEpDesc+0x66>
          break;
 80082e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082e4:	693b      	ldr	r3, [r7, #16]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	4413      	add	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008318:	68fb      	ldr	r3, [r7, #12]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008326:	b480      	push	{r7}
 8008328:	b087      	sub	sp, #28
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	3301      	adds	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008344:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b21a      	sxth	r2, r3
 800834c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008350:	4313      	orrs	r3, r2
 8008352:	b21b      	sxth	r3, r3
 8008354:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008356:	89fb      	ldrh	r3, [r7, #14]
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800837a:	2b40      	cmp	r3, #64	@ 0x40
 800837c:	d005      	beq.n	800838a <USBD_StdDevReq+0x26>
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d857      	bhi.n	8008432 <USBD_StdDevReq+0xce>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00f      	beq.n	80083a6 <USBD_StdDevReq+0x42>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d153      	bne.n	8008432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32ae      	adds	r2, #174	@ 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
      break;
 80083a4:	e04a      	b.n	800843c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d83b      	bhi.n	8008426 <USBD_StdDevReq+0xc2>
 80083ae:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <USBD_StdDevReq+0x50>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	08008409 	.word	0x08008409
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	08008427 	.word	0x08008427
 80083c0:	08008413 	.word	0x08008413
 80083c4:	08008427 	.word	0x08008427
 80083c8:	080083e7 	.word	0x080083e7
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	08008427 	.word	0x08008427
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	080083f1 	.word	0x080083f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa3c 	bl	800885c <USBD_GetDescriptor>
          break;
 80083e4:	e024      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fbcb 	bl	8008b84 <USBD_SetAddress>
          break;
 80083ee:	e01f      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fc0a 	bl	8008c0c <USBD_SetConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
          break;
 80083fc:	e018      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fcad 	bl	8008d60 <USBD_GetConfig>
          break;
 8008406:	e013      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fcde 	bl	8008dcc <USBD_GetStatus>
          break;
 8008410:	e00e      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fd0d 	bl	8008e34 <USBD_SetFeature>
          break;
 800841a:	e009      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd31 	bl	8008e86 <USBD_ClrFeature>
          break;
 8008424:	e004      	b.n	8008430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fd88 	bl	8008f3e <USBD_CtlError>
          break;
 800842e:	bf00      	nop
      }
      break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fd82 	bl	8008f3e <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop

08008448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d005      	beq.n	800846e <USBD_StdItfReq+0x26>
 8008462:	2b40      	cmp	r3, #64	@ 0x40
 8008464:	d852      	bhi.n	800850c <USBD_StdItfReq+0xc4>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USBD_StdItfReq+0x26>
 800846a:	2b20      	cmp	r3, #32
 800846c:	d14e      	bne.n	800850c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	2b02      	cmp	r3, #2
 800847a:	d840      	bhi.n	80084fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	889b      	ldrh	r3, [r3, #4]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d836      	bhi.n	80084f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	889b      	ldrh	r3, [r3, #4]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fedb 	bl	800824a <USBD_CoreFindIF>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2bff      	cmp	r3, #255	@ 0xff
 800849c:	d01d      	beq.n	80084da <USBD_StdItfReq+0x92>
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d11a      	bne.n	80084da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084a4:	7bba      	ldrb	r2, [r7, #14]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	@ 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084bc:	7bba      	ldrb	r2, [r7, #14]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32ae      	adds	r2, #174	@ 0xae
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d2:	e004      	b.n	80084de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d8:	e001      	b.n	80084de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	88db      	ldrh	r3, [r3, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d110      	bne.n	8008508 <USBD_StdItfReq+0xc0>
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fdfd 	bl	80090ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f2:	e009      	b.n	8008508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fd21 	bl	8008f3e <USBD_CtlError>
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd1c 	bl	8008f3e <USBD_CtlError>
          break;
 8008506:	e000      	b.n	800850a <USBD_StdItfReq+0xc2>
          break;
 8008508:	bf00      	nop
      }
      break;
 800850a:	e004      	b.n	8008516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fd15 	bl	8008f3e <USBD_CtlError>
      break;
 8008514:	bf00      	nop
  }

  return ret;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800853c:	2b40      	cmp	r3, #64	@ 0x40
 800853e:	d007      	beq.n	8008550 <USBD_StdEPReq+0x30>
 8008540:	2b40      	cmp	r3, #64	@ 0x40
 8008542:	f200 817f 	bhi.w	8008844 <USBD_StdEPReq+0x324>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d02a      	beq.n	80085a0 <USBD_StdEPReq+0x80>
 800854a:	2b20      	cmp	r3, #32
 800854c:	f040 817a 	bne.w	8008844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fe85 	bl	8008264 <USBD_CoreFindEP>
 800855a:	4603      	mov	r3, r0
 800855c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2bff      	cmp	r3, #255	@ 0xff
 8008562:	f000 8174 	beq.w	800884e <USBD_StdEPReq+0x32e>
 8008566:	7b7b      	ldrb	r3, [r7, #13]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8170 	bne.w	800884e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008576:	7b7a      	ldrb	r2, [r7, #13]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32ae      	adds	r2, #174	@ 0xae
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8163 	beq.w	800884e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	@ 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800859e:	e156      	b.n	800884e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0x9a>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	f300 8145 	bgt.w	8008838 <USBD_StdEPReq+0x318>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 809b 	beq.w	80086ea <USBD_StdEPReq+0x1ca>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d03c      	beq.n	8008632 <USBD_StdEPReq+0x112>
 80085b8:	e13e      	b.n	8008838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0xac>
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d016      	beq.n	80085f8 <USBD_StdEPReq+0xd8>
 80085ca:	e02c      	b.n	8008626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_StdEPReq+0xce>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b80      	cmp	r3, #128	@ 0x80
 80085d6:	d00a      	beq.n	80085ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f99f 	bl	8009920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e2:	2180      	movs	r1, #128	@ 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f99b 	bl	8009920 <USBD_LL_StallEP>
 80085ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e020      	b.n	8008630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fca4 	bl	8008f3e <USBD_CtlError>
              break;
 80085f6:	e01b      	b.n	8008630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10e      	bne.n	800861e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <USBD_StdEPReq+0xfe>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b80      	cmp	r3, #128	@ 0x80
 800860a:	d008      	beq.n	800861e <USBD_StdEPReq+0xfe>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f981 	bl	8009920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fd64 	bl	80090ec <USBD_CtlSendStatus>

              break;
 8008624:	e004      	b.n	8008630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc88 	bl	8008f3e <USBD_CtlError>
              break;
 800862e:	bf00      	nop
          }
          break;
 8008630:	e107      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d002      	beq.n	8008644 <USBD_StdEPReq+0x124>
 800863e:	2b03      	cmp	r3, #3
 8008640:	d016      	beq.n	8008670 <USBD_StdEPReq+0x150>
 8008642:	e04b      	b.n	80086dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00d      	beq.n	8008666 <USBD_StdEPReq+0x146>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b80      	cmp	r3, #128	@ 0x80
 800864e:	d00a      	beq.n	8008666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f963 	bl	8009920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865a:	2180      	movs	r1, #128	@ 0x80
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f95f 	bl	8009920 <USBD_LL_StallEP>
 8008662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008664:	e040      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc68 	bl	8008f3e <USBD_CtlError>
              break;
 800866e:	e03b      	b.n	80086e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d136      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f969 	bl	800995e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fd2d 	bl	80090ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fde4 	bl	8008264 <USBD_CoreFindEP>
 800869c:	4603      	mov	r3, r0
 800869e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a0:	7b7b      	ldrb	r3, [r7, #13]
 80086a2:	2bff      	cmp	r3, #255	@ 0xff
 80086a4:	d01f      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
 80086a6:	7b7b      	ldrb	r3, [r7, #13]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11c      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086b4:	7b7a      	ldrb	r2, [r7, #13]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32ae      	adds	r2, #174	@ 0xae
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c4:	7b7a      	ldrb	r2, [r7, #13]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	@ 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086da:	e004      	b.n	80086e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fc2d 	bl	8008f3e <USBD_CtlError>
              break;
 80086e4:	e000      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
              break;
 80086e6:	bf00      	nop
          }
          break;
 80086e8:	e0ab      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d002      	beq.n	80086fc <USBD_StdEPReq+0x1dc>
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d032      	beq.n	8008760 <USBD_StdEPReq+0x240>
 80086fa:	e097      	b.n	800882c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b80      	cmp	r3, #128	@ 0x80
 8008706:	d004      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc17 	bl	8008f3e <USBD_CtlError>
                break;
 8008710:	e091      	b.n	8008836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da0b      	bge.n	8008732 <USBD_StdEPReq+0x212>
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	3310      	adds	r3, #16
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	e00b      	b.n	800874a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2202      	movs	r2, #2
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc6d 	bl	8009038 <USBD_CtlSendData>
              break;
 800875e:	e06a      	b.n	8008836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	da11      	bge.n	800878c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	3324      	adds	r3, #36	@ 0x24
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d117      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbda 	bl	8008f3e <USBD_CtlError>
                  break;
 800878a:	e054      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fbc7 	bl	8008f3e <USBD_CtlError>
                  break;
 80087b0:	e041      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da0b      	bge.n	80087d2 <USBD_StdEPReq+0x2b2>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	3310      	adds	r3, #16
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	3304      	adds	r3, #4
 80087d0:	e00b      	b.n	80087ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <USBD_StdEPReq+0x2d8>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	@ 0x80
 80087f6:	d103      	bne.n	8008800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e00e      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f8c9 	bl	800999c <USBD_LL_IsStallEP>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e002      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc07 	bl	8009038 <USBD_CtlSendData>
              break;
 800882a:	e004      	b.n	8008836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fb85 	bl	8008f3e <USBD_CtlError>
              break;
 8008834:	bf00      	nop
          }
          break;
 8008836:	e004      	b.n	8008842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb7f 	bl	8008f3e <USBD_CtlError>
          break;
 8008840:	bf00      	nop
      }
      break;
 8008842:	e005      	b.n	8008850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb79 	bl	8008f3e <USBD_CtlError>
      break;
 800884c:	e000      	b.n	8008850 <USBD_StdEPReq+0x330>
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	2b0e      	cmp	r3, #14
 800887e:	f200 8152 	bhi.w	8008b26 <USBD_GetDescriptor+0x2ca>
 8008882:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <USBD_GetDescriptor+0x2c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088f9 	.word	0x080088f9
 800888c:	08008911 	.word	0x08008911
 8008890:	08008951 	.word	0x08008951
 8008894:	08008b27 	.word	0x08008b27
 8008898:	08008b27 	.word	0x08008b27
 800889c:	08008ac7 	.word	0x08008ac7
 80088a0:	08008af3 	.word	0x08008af3
 80088a4:	08008b27 	.word	0x08008b27
 80088a8:	08008b27 	.word	0x08008b27
 80088ac:	08008b27 	.word	0x08008b27
 80088b0:	08008b27 	.word	0x08008b27
 80088b4:	08008b27 	.word	0x08008b27
 80088b8:	08008b27 	.word	0x08008b27
 80088bc:	08008b27 	.word	0x08008b27
 80088c0:	080088c5 	.word	0x080088c5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e6:	e126      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fb27 	bl	8008f3e <USBD_CtlError>
        err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
      break;
 80088f6:	e11e      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
      break;
 800890e:	e112      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7c1b      	ldrb	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10d      	bne.n	8008934 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	f107 0208 	add.w	r2, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	2202      	movs	r2, #2
 8008930:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008932:	e100      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	f107 0208 	add.w	r2, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	2202      	movs	r2, #2
 800894c:	701a      	strb	r2, [r3, #0]
      break;
 800894e:	e0f2      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b05      	cmp	r3, #5
 8008958:	f200 80ac 	bhi.w	8008ab4 <USBD_GetDescriptor+0x258>
 800895c:	a201      	add	r2, pc, #4	@ (adr r2, 8008964 <USBD_GetDescriptor+0x108>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	0800897d 	.word	0x0800897d
 8008968:	080089b1 	.word	0x080089b1
 800896c:	080089e5 	.word	0x080089e5
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a4d 	.word	0x08008a4d
 8008978:	08008a81 	.word	0x08008a81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e091      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 facb 	bl	8008f3e <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e089      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	7c12      	ldrb	r2, [r2, #16]
 80089c8:	f107 0108 	add.w	r1, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d2:	e077      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fab1 	bl	8008f3e <USBD_CtlError>
            err++;
 80089dc:	7afb      	ldrb	r3, [r7, #11]
 80089de:	3301      	adds	r3, #1
 80089e0:	72fb      	strb	r3, [r7, #11]
          break;
 80089e2:	e06f      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a06:	e05d      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa97 	bl	8008f3e <USBD_CtlError>
            err++;
 8008a10:	7afb      	ldrb	r3, [r7, #11]
 8008a12:	3301      	adds	r3, #1
 8008a14:	72fb      	strb	r3, [r7, #11]
          break;
 8008a16:	e055      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	7c12      	ldrb	r2, [r2, #16]
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
 8008a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3a:	e043      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa7d 	bl	8008f3e <USBD_CtlError>
            err++;
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	3301      	adds	r3, #1
 8008a48:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4a:	e03b      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e029      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa63 	bl	8008f3e <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e021      	b.n	8008ac4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e00f      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa49 	bl	8008f3e <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e007      	b.n	8008ac4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa41 	bl	8008f3e <USBD_CtlError>
          err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008ac2:	bf00      	nop
      }
      break;
 8008ac4:	e037      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae0:	e029      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa2a 	bl	8008f3e <USBD_CtlError>
        err++;
 8008aea:	7afb      	ldrb	r3, [r7, #11]
 8008aec:	3301      	adds	r3, #1
 8008aee:	72fb      	strb	r3, [r7, #11]
      break;
 8008af0:	e021      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	7c1b      	ldrb	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b02:	f107 0208 	add.w	r2, r7, #8
 8008b06:	4610      	mov	r0, r2
 8008b08:	4798      	blx	r3
 8008b0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	2207      	movs	r2, #7
 8008b12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b14:	e00f      	b.n	8008b36 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fa10 	bl	8008f3e <USBD_CtlError>
        err++;
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	3301      	adds	r3, #1
 8008b22:	72fb      	strb	r3, [r7, #11]
      break;
 8008b24:	e007      	b.n	8008b36 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa08 	bl	8008f3e <USBD_CtlError>
      err++;
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	3301      	adds	r3, #1
 8008b32:	72fb      	strb	r3, [r7, #11]
      break;
 8008b34:	bf00      	nop
  }

  if (err != 0U)
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11e      	bne.n	8008b7a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	88db      	ldrh	r3, [r3, #6]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d016      	beq.n	8008b72 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00e      	beq.n	8008b68 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	88da      	ldrh	r2, [r3, #6]
 8008b4e:	893b      	ldrh	r3, [r7, #8]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bf28      	it	cs
 8008b54:	4613      	movcs	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b5a:	893b      	ldrh	r3, [r7, #8]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68f9      	ldr	r1, [r7, #12]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa69 	bl	8009038 <USBD_CtlSendData>
 8008b66:	e009      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f9e7 	bl	8008f3e <USBD_CtlError>
 8008b70:	e004      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 faba 	bl	80090ec <USBD_CtlSendStatus>
 8008b78:	e000      	b.n	8008b7c <USBD_GetDescriptor+0x320>
    return;
 8008b7a:	bf00      	nop
  }
}
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop

08008b84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	889b      	ldrh	r3, [r3, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d131      	bne.n	8008bfa <USBD_SetAddress+0x76>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d12d      	bne.n	8008bfa <USBD_SetAddress+0x76>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ba4:	d829      	bhi.n	8008bfa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d104      	bne.n	8008bc8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9bc 	bl	8008f3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	e01d      	b.n	8008c04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	7bfa      	ldrb	r2, [r7, #15]
 8008bcc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 ff0d 	bl	80099f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa86 	bl	80090ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bee:	e009      	b.n	8008c04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	e004      	b.n	8008c04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f99e 	bl	8008f3e <USBD_CtlError>
  }
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	4b4e      	ldr	r3, [pc, #312]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c24:	4b4d      	ldr	r3, [pc, #308]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d905      	bls.n	8008c38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f985 	bl	8008f3e <USBD_CtlError>
    return USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e08c      	b.n	8008d52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d002      	beq.n	8008c4a <USBD_SetConfig+0x3e>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d029      	beq.n	8008c9c <USBD_SetConfig+0x90>
 8008c48:	e075      	b.n	8008d36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c4a:	4b44      	ldr	r3, [pc, #272]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d020      	beq.n	8008c94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c52:	4b42      	ldr	r3, [pc, #264]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fe ffb9 	bl	8007bda <USBD_SetClassConfig>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d008      	beq.n	8008c84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f962 	bl	8008f3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c82:	e065      	b.n	8008d50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fa31 	bl	80090ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c92:	e05d      	b.n	8008d50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa29 	bl	80090ec <USBD_CtlSendStatus>
      break;
 8008c9a:	e059      	b.n	8008d50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d112      	bne.n	8008cca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008cac:	4b2b      	ldr	r3, [pc, #172]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cb6:	4b29      	ldr	r3, [pc, #164]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7fe ffa8 	bl	8007c12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa12 	bl	80090ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cc8:	e042      	b.n	8008d50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008cca:	4b24      	ldr	r3, [pc, #144]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d02a      	beq.n	8008d2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fe ff96 	bl	8007c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	461a      	mov	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fe ff6f 	bl	8007bda <USBD_SetClassConfig>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00f      	beq.n	8008d26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f918 	bl	8008f3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe ff7b 	bl	8007c12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d24:	e014      	b.n	8008d50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f9e0 	bl	80090ec <USBD_CtlSendStatus>
      break;
 8008d2c:	e010      	b.n	8008d50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f9dc 	bl	80090ec <USBD_CtlSendStatus>
      break;
 8008d34:	e00c      	b.n	8008d50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f900 	bl	8008f3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d3e:	4b07      	ldr	r3, [pc, #28]	@ (8008d5c <USBD_SetConfig+0x150>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7fe ff64 	bl	8007c12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4e:	bf00      	nop
  }

  return ret;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	240001ac 	.word	0x240001ac

08008d60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	88db      	ldrh	r3, [r3, #6]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d004      	beq.n	8008d7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f8e2 	bl	8008f3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d7a:	e023      	b.n	8008dc4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	dc02      	bgt.n	8008d8e <USBD_GetConfig+0x2e>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dc03      	bgt.n	8008d94 <USBD_GetConfig+0x34>
 8008d8c:	e015      	b.n	8008dba <USBD_GetConfig+0x5a>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d00b      	beq.n	8008daa <USBD_GetConfig+0x4a>
 8008d92:	e012      	b.n	8008dba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	2201      	movs	r2, #1
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f948 	bl	8009038 <USBD_CtlSendData>
        break;
 8008da8:	e00c      	b.n	8008dc4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3304      	adds	r3, #4
 8008dae:	2201      	movs	r2, #1
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f940 	bl	8009038 <USBD_CtlSendData>
        break;
 8008db8:	e004      	b.n	8008dc4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8be 	bl	8008f3e <USBD_CtlError>
        break;
 8008dc2:	bf00      	nop
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	3b01      	subs	r3, #1
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d81e      	bhi.n	8008e22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d004      	beq.n	8008df6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8a5 	bl	8008f3e <USBD_CtlError>
        break;
 8008df4:	e01a      	b.n	8008e2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d005      	beq.n	8008e12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f043 0202 	orr.w	r2, r3, #2
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	330c      	adds	r3, #12
 8008e16:	2202      	movs	r2, #2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f90c 	bl	8009038 <USBD_CtlSendData>
      break;
 8008e20:	e004      	b.n	8008e2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f88a 	bl	8008f3e <USBD_CtlError>
      break;
 8008e2a:	bf00      	nop
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	885b      	ldrh	r3, [r3, #2]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d107      	bne.n	8008e56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f94c 	bl	80090ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e54:	e013      	b.n	8008e7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	885b      	ldrh	r3, [r3, #2]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d10b      	bne.n	8008e76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	889b      	ldrh	r3, [r3, #4]
 8008e62:	0a1b      	lsrs	r3, r3, #8
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f93c 	bl	80090ec <USBD_CtlSendStatus>
}
 8008e74:	e003      	b.n	8008e7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f860 	bl	8008f3e <USBD_CtlError>
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d80b      	bhi.n	8008eb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	885b      	ldrh	r3, [r3, #2]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d10c      	bne.n	8008ec0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f91c 	bl	80090ec <USBD_CtlSendStatus>
      }
      break;
 8008eb4:	e004      	b.n	8008ec0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f840 	bl	8008f3e <USBD_CtlError>
      break;
 8008ebe:	e000      	b.n	8008ec2 <USBD_ClrFeature+0x3c>
      break;
 8008ec0:	bf00      	nop
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fa16 	bl	8008326 <SWAPBYTE>
 8008efa:	4603      	mov	r3, r0
 8008efc:	461a      	mov	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fa09 	bl	8008326 <SWAPBYTE>
 8008f14:	4603      	mov	r3, r0
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff f9fc 	bl	8008326 <SWAPBYTE>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	461a      	mov	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	80da      	strh	r2, [r3, #6]
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f48:	2180      	movs	r1, #128	@ 0x80
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fce8 	bl	8009920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f50:	2100      	movs	r1, #0
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fce4 	bl	8009920 <USBD_LL_StallEP>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d042      	beq.n	8008ffc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f000 f842 	bl	8009004 <USBD_GetLen>
 8008f80:	4603      	mov	r3, r0
 8008f82:	3301      	adds	r3, #1
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8a:	d808      	bhi.n	8008f9e <USBD_GetString+0x3e>
 8008f8c:	6938      	ldr	r0, [r7, #16]
 8008f8e:	f000 f839 	bl	8009004 <USBD_GetLen>
 8008f92:	4603      	mov	r3, r0
 8008f94:	3301      	adds	r3, #1
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	e001      	b.n	8008fa2 <USBD_GetString+0x42>
 8008f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	4413      	add	r3, r2
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7812      	ldrb	r2, [r2, #0]
 8008fb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008fc8:	e013      	b.n	8008ff2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	4413      	add	r3, r2
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]
    idx++;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e7      	bne.n	8008fca <USBD_GetString+0x6a>
 8008ffa:	e000      	b.n	8008ffe <USBD_GetString+0x9e>
    return;
 8008ffc:	bf00      	nop
  }
}
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009014:	e005      	b.n	8009022 <USBD_GetLen+0x1e>
  {
    len++;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	3301      	adds	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	3301      	adds	r3, #1
 8009020:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f5      	bne.n	8009016 <USBD_GetLen+0x12>
  }

  return len;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2202      	movs	r2, #2
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	2100      	movs	r1, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fce7 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	2100      	movs	r1, #0
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 fcd6 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2203      	movs	r2, #3
 80090a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	2100      	movs	r1, #0
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fcda 	bl	8009a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	2100      	movs	r1, #0
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f000 fcc9 	bl	8009a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2204      	movs	r2, #4
 80090f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090fc:	2300      	movs	r3, #0
 80090fe:	2200      	movs	r2, #0
 8009100:	2100      	movs	r1, #0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fc95 	bl	8009a32 <USBD_LL_Transmit>

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2205      	movs	r2, #5
 800911e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009122:	2300      	movs	r3, #0
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fca3 	bl	8009a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800913c:	2201      	movs	r2, #1
 800913e:	4913      	ldr	r1, [pc, #76]	@ (800918c <MX_USB_DEVICE_Init+0x54>)
 8009140:	4813      	ldr	r0, [pc, #76]	@ (8009190 <MX_USB_DEVICE_Init+0x58>)
 8009142:	f7fe fccd 	bl	8007ae0 <USBD_Init>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800914c:	f7f7 fad6 	bl	80006fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009150:	4910      	ldr	r1, [pc, #64]	@ (8009194 <MX_USB_DEVICE_Init+0x5c>)
 8009152:	480f      	ldr	r0, [pc, #60]	@ (8009190 <MX_USB_DEVICE_Init+0x58>)
 8009154:	f7fe fcf4 	bl	8007b40 <USBD_RegisterClass>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800915e:	f7f7 facd 	bl	80006fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009162:	490d      	ldr	r1, [pc, #52]	@ (8009198 <MX_USB_DEVICE_Init+0x60>)
 8009164:	480a      	ldr	r0, [pc, #40]	@ (8009190 <MX_USB_DEVICE_Init+0x58>)
 8009166:	f7fe fc2b 	bl	80079c0 <USBD_CDC_RegisterInterface>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009170:	f7f7 fac4 	bl	80006fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009174:	4806      	ldr	r0, [pc, #24]	@ (8009190 <MX_USB_DEVICE_Init+0x58>)
 8009176:	f7fe fd19 	bl	8007bac <USBD_Start>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009180:	f7f7 fabc 	bl	80006fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009184:	f7f9 fb40 	bl	8002808 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009188:	bf00      	nop
 800918a:	bd80      	pop	{r7, pc}
 800918c:	240000b0 	.word	0x240000b0
 8009190:	240001b0 	.word	0x240001b0
 8009194:	2400001c 	.word	0x2400001c
 8009198:	2400009c 	.word	0x2400009c

0800919c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80091a0:	2200      	movs	r2, #0
 80091a2:	4905      	ldr	r1, [pc, #20]	@ (80091b8 <CDC_Init_HS+0x1c>)
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <CDC_Init_HS+0x20>)
 80091a6:	f7fe fc25 	bl	80079f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80091aa:	4905      	ldr	r1, [pc, #20]	@ (80091c0 <CDC_Init_HS+0x24>)
 80091ac:	4803      	ldr	r0, [pc, #12]	@ (80091bc <CDC_Init_HS+0x20>)
 80091ae:	f7fe fc43 	bl	8007a38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091b2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	24000c8c 	.word	0x24000c8c
 80091bc:	240001b0 	.word	0x240001b0
 80091c0:	2400048c 	.word	0x2400048c

080091c4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80091c8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
 80091e0:	4613      	mov	r3, r2
 80091e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b23      	cmp	r3, #35	@ 0x23
 80091e8:	d84a      	bhi.n	8009280 <CDC_Control_HS+0xac>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <CDC_Control_HS+0x1c>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009281 	.word	0x08009281
 80091f8:	08009281 	.word	0x08009281
 80091fc:	08009281 	.word	0x08009281
 8009200:	08009281 	.word	0x08009281
 8009204:	08009281 	.word	0x08009281
 8009208:	08009281 	.word	0x08009281
 800920c:	08009281 	.word	0x08009281
 8009210:	08009281 	.word	0x08009281
 8009214:	08009281 	.word	0x08009281
 8009218:	08009281 	.word	0x08009281
 800921c:	08009281 	.word	0x08009281
 8009220:	08009281 	.word	0x08009281
 8009224:	08009281 	.word	0x08009281
 8009228:	08009281 	.word	0x08009281
 800922c:	08009281 	.word	0x08009281
 8009230:	08009281 	.word	0x08009281
 8009234:	08009281 	.word	0x08009281
 8009238:	08009281 	.word	0x08009281
 800923c:	08009281 	.word	0x08009281
 8009240:	08009281 	.word	0x08009281
 8009244:	08009281 	.word	0x08009281
 8009248:	08009281 	.word	0x08009281
 800924c:	08009281 	.word	0x08009281
 8009250:	08009281 	.word	0x08009281
 8009254:	08009281 	.word	0x08009281
 8009258:	08009281 	.word	0x08009281
 800925c:	08009281 	.word	0x08009281
 8009260:	08009281 	.word	0x08009281
 8009264:	08009281 	.word	0x08009281
 8009268:	08009281 	.word	0x08009281
 800926c:	08009281 	.word	0x08009281
 8009270:	08009281 	.word	0x08009281
 8009274:	08009281 	.word	0x08009281
 8009278:	08009281 	.word	0x08009281
 800927c:	08009281 	.word	0x08009281
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009280:	bf00      	nop
  }

  return (USBD_OK);
 8009282:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4805      	ldr	r0, [pc, #20]	@ (80092b4 <CDC_Receive_HS+0x24>)
 800929e:	f7fe fbcb 	bl	8007a38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80092a2:	4804      	ldr	r0, [pc, #16]	@ (80092b4 <CDC_Receive_HS+0x24>)
 80092a4:	f7fe fbe6 	bl	8007a74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092a8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	240001b0 	.word	0x240001b0

080092b8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80092ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2212      	movs	r2, #18
 80092ec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80092ee:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <USBD_HS_DeviceDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	240000d0 	.word	0x240000d0

08009300 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2204      	movs	r2, #4
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	@ (8009320 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	240000e4 	.word	0x240000e4

08009324 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4907      	ldr	r1, [pc, #28]	@ (8009358 <USBD_HS_ProductStrDescriptor+0x34>)
 800933a:	4808      	ldr	r0, [pc, #32]	@ (800935c <USBD_HS_ProductStrDescriptor+0x38>)
 800933c:	f7ff fe10 	bl	8008f60 <USBD_GetString>
 8009340:	e004      	b.n	800934c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4904      	ldr	r1, [pc, #16]	@ (8009358 <USBD_HS_ProductStrDescriptor+0x34>)
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <USBD_HS_ProductStrDescriptor+0x38>)
 8009348:	f7ff fe0a 	bl	8008f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	2400148c 	.word	0x2400148c
 800935c:	08009bd4 	.word	0x08009bd4

08009360 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	4904      	ldr	r1, [pc, #16]	@ (8009380 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009370:	4804      	ldr	r0, [pc, #16]	@ (8009384 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009372:	f7ff fdf5 	bl	8008f60 <USBD_GetString>
  return USBD_StrDesc;
 8009376:	4b02      	ldr	r3, [pc, #8]	@ (8009380 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	2400148c 	.word	0x2400148c
 8009384:	08009bec 	.word	0x08009bec

08009388 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	221a      	movs	r2, #26
 8009398:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800939a:	f000 f843 	bl	8009424 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800939e:	4b02      	ldr	r3, [pc, #8]	@ (80093a8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	240000e8 	.word	0x240000e8

080093ac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4907      	ldr	r1, [pc, #28]	@ (80093e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80093c2:	4808      	ldr	r0, [pc, #32]	@ (80093e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80093c4:	f7ff fdcc 	bl	8008f60 <USBD_GetString>
 80093c8:	e004      	b.n	80093d4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	4904      	ldr	r1, [pc, #16]	@ (80093e0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80093ce:	4805      	ldr	r0, [pc, #20]	@ (80093e4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80093d0:	f7ff fdc6 	bl	8008f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d4:	4b02      	ldr	r3, [pc, #8]	@ (80093e0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	2400148c 	.word	0x2400148c
 80093e4:	08009c00 	.word	0x08009c00

080093e8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d105      	bne.n	8009406 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	4907      	ldr	r1, [pc, #28]	@ (800941c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80093fe:	4808      	ldr	r0, [pc, #32]	@ (8009420 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009400:	f7ff fdae 	bl	8008f60 <USBD_GetString>
 8009404:	e004      	b.n	8009410 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4904      	ldr	r1, [pc, #16]	@ (800941c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800940a:	4805      	ldr	r0, [pc, #20]	@ (8009420 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800940c:	f7ff fda8 	bl	8008f60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009410:	4b02      	ldr	r3, [pc, #8]	@ (800941c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2400148c 	.word	0x2400148c
 8009420:	08009c0c 	.word	0x08009c0c

08009424 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800942a:	4b0f      	ldr	r3, [pc, #60]	@ (8009468 <Get_SerialNum+0x44>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009430:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <Get_SerialNum+0x48>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009436:	4b0e      	ldr	r3, [pc, #56]	@ (8009470 <Get_SerialNum+0x4c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800944a:	2208      	movs	r2, #8
 800944c:	4909      	ldr	r1, [pc, #36]	@ (8009474 <Get_SerialNum+0x50>)
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f814 	bl	800947c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009454:	2204      	movs	r2, #4
 8009456:	4908      	ldr	r1, [pc, #32]	@ (8009478 <Get_SerialNum+0x54>)
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f000 f80f 	bl	800947c <IntToUnicode>
  }
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	1ff1e800 	.word	0x1ff1e800
 800946c:	1ff1e804 	.word	0x1ff1e804
 8009470:	1ff1e808 	.word	0x1ff1e808
 8009474:	240000ea 	.word	0x240000ea
 8009478:	240000fa 	.word	0x240000fa

0800947c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800948e:	2300      	movs	r3, #0
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e027      	b.n	80094e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	0f1b      	lsrs	r3, r3, #28
 8009498:	2b09      	cmp	r3, #9
 800949a:	d80b      	bhi.n	80094b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0f1b      	lsrs	r3, r3, #28
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4619      	mov	r1, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	440b      	add	r3, r1
 80094ac:	3230      	adds	r2, #48	@ 0x30
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e00a      	b.n	80094ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4619      	mov	r1, r3
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	440b      	add	r3, r1
 80094c4:	3237      	adds	r2, #55	@ 0x37
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	005b      	lsls	r3, r3, #1
 80094d4:	3301      	adds	r3, #1
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	4413      	add	r3, r2
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	3301      	adds	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
 80094e4:	7dfa      	ldrb	r2, [r7, #23]
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d3d3      	bcc.n	8009494 <IntToUnicode+0x18>
  }
}
 80094ec:	bf00      	nop
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b0b8      	sub	sp, #224	@ 0xe0
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009504:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	605a      	str	r2, [r3, #4]
 800950e:	609a      	str	r2, [r3, #8]
 8009510:	60da      	str	r2, [r3, #12]
 8009512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009514:	f107 0310 	add.w	r3, r7, #16
 8009518:	22b8      	movs	r2, #184	@ 0xb8
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f000 fb21 	bl	8009b64 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a29      	ldr	r2, [pc, #164]	@ (80095cc <HAL_PCD_MspInit+0xd0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d14b      	bne.n	80095c4 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800952c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009538:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800953c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009540:	f107 0310 	add.w	r3, r7, #16
 8009544:	4618      	mov	r0, r3
 8009546:	f7fa f8a9 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8009550:	f7f7 f8d4 	bl	80006fc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009554:	f7f9 f958 	bl	8002808 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009558:	4b1d      	ldr	r3, [pc, #116]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 800955a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800955e:	4a1c      	ldr	r2, [pc, #112]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 8009560:	f043 0301 	orr.w	r3, r3, #1
 8009564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009568:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 800956a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800957a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800957e:	2300      	movs	r3, #0
 8009580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009584:	2300      	movs	r3, #0
 8009586:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800958a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800958e:	4619      	mov	r1, r3
 8009590:	4810      	ldr	r0, [pc, #64]	@ (80095d4 <HAL_PCD_MspInit+0xd8>)
 8009592:	f7f7 fc9d 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009596:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 8009598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800959c:	4a0c      	ldr	r2, [pc, #48]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 800959e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80095a6:	4b0a      	ldr	r3, [pc, #40]	@ (80095d0 <HAL_PCD_MspInit+0xd4>)
 80095a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80095ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095b0:	60bb      	str	r3, [r7, #8]
 80095b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80095b4:	2200      	movs	r2, #0
 80095b6:	2100      	movs	r1, #0
 80095b8:	204d      	movs	r0, #77	@ 0x4d
 80095ba:	f7f7 fbdc 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80095be:	204d      	movs	r0, #77	@ 0x4d
 80095c0:	f7f7 fbf3 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80095c4:	bf00      	nop
 80095c6:	37e0      	adds	r7, #224	@ 0xe0
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40040000 	.word	0x40040000
 80095d0:	58024400 	.word	0x58024400
 80095d4:	58020000 	.word	0x58020000

080095d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f7fe fb29 	bl	8007c46 <USBD_LL_SetupStage>
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	4619      	mov	r1, r3
 8009626:	f7fe fb63 	bl	8007cf0 <USBD_LL_DataOutStage>
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	4613      	mov	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	3320      	adds	r3, #32
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	78fb      	ldrb	r3, [r7, #3]
 8009658:	4619      	mov	r1, r3
 800965a:	f7fe fbfc 	bl	8007e56 <USBD_LL_DataInStage>
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009674:	4618      	mov	r0, r3
 8009676:	f7fe fd36 	bl	80080e6 <USBD_LL_SOF>
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800968a:	2301      	movs	r3, #1
 800968c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	79db      	ldrb	r3, [r3, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d102      	bne.n	800969c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
 800969a:	e008      	b.n	80096ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	79db      	ldrb	r3, [r3, #7]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d102      	bne.n	80096aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80096a4:	2301      	movs	r3, #1
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e001      	b.n	80096ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80096aa:	f7f7 f827 	bl	80006fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096b4:	7bfa      	ldrb	r2, [r7, #15]
 80096b6:	4611      	mov	r1, r2
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fe fcd0 	bl	800805e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fc78 	bl	8007fba <USBD_LL_Reset>
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fccb 	bl	800807e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7adb      	ldrb	r3, [r3, #11]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009708:	4b04      	ldr	r3, [pc, #16]	@ (800971c <HAL_PCD_SuspendCallback+0x48>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	4a03      	ldr	r2, [pc, #12]	@ (800971c <HAL_PCD_SuspendCallback+0x48>)
 800970e:	f043 0306 	orr.w	r3, r3, #6
 8009712:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	e000ed00 	.word	0xe000ed00

08009720 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fcc1 	bl	80080b6 <USBD_LL_Resume>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fd19 	bl	800818a <USBD_LL_IsoOUTIncomplete>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009772:	78fa      	ldrb	r2, [r7, #3]
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fcd5 	bl	8008126 <USBD_LL_IsoINIncomplete>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fd2b 	bl	80081ee <USBD_LL_DevConnected>
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fd28 	bl	8008204 <USBD_LL_DevDisconnected>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d140      	bne.n	800984e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80097cc:	4a22      	ldr	r2, [pc, #136]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a20      	ldr	r2, [pc, #128]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80097dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097de:	4a1f      	ldr	r2, [pc, #124]	@ (800985c <USBD_LL_Init+0xa0>)
 80097e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80097e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097e4:	2209      	movs	r2, #9
 80097e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80097e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097ea:	2202      	movs	r2, #2
 80097ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80097ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80097f4:	4b18      	ldr	r3, [pc, #96]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097f6:	2202      	movs	r2, #2
 80097f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80097fa:	4b17      	ldr	r3, [pc, #92]	@ (8009858 <USBD_LL_Init+0x9c>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009800:	4b15      	ldr	r3, [pc, #84]	@ (8009858 <USBD_LL_Init+0x9c>)
 8009802:	2200      	movs	r2, #0
 8009804:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009806:	4b14      	ldr	r3, [pc, #80]	@ (8009858 <USBD_LL_Init+0x9c>)
 8009808:	2200      	movs	r2, #0
 800980a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800980c:	4b12      	ldr	r3, [pc, #72]	@ (8009858 <USBD_LL_Init+0x9c>)
 800980e:	2201      	movs	r2, #1
 8009810:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009812:	4b11      	ldr	r3, [pc, #68]	@ (8009858 <USBD_LL_Init+0x9c>)
 8009814:	2200      	movs	r2, #0
 8009816:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009818:	4b0f      	ldr	r3, [pc, #60]	@ (8009858 <USBD_LL_Init+0x9c>)
 800981a:	2200      	movs	r2, #0
 800981c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800981e:	480e      	ldr	r0, [pc, #56]	@ (8009858 <USBD_LL_Init+0x9c>)
 8009820:	f7f7 fd17 	bl	8001252 <HAL_PCD_Init>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800982a:	f7f6 ff67 	bl	80006fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800982e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009832:	4809      	ldr	r0, [pc, #36]	@ (8009858 <USBD_LL_Init+0x9c>)
 8009834:	f7f8 ff6d 	bl	8002712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009838:	2280      	movs	r2, #128	@ 0x80
 800983a:	2100      	movs	r1, #0
 800983c:	4806      	ldr	r0, [pc, #24]	@ (8009858 <USBD_LL_Init+0x9c>)
 800983e:	f7f8 ff21 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009842:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8009846:	2101      	movs	r1, #1
 8009848:	4803      	ldr	r0, [pc, #12]	@ (8009858 <USBD_LL_Init+0x9c>)
 800984a:	f7f8 ff1b 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	2400168c 	.word	0x2400168c
 800985c:	40040000 	.word	0x40040000

08009860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009876:	4618      	mov	r0, r3
 8009878:	f7f7 fdf7 	bl	800146a <HAL_PCD_Start>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f942 	bl	8009b0c <USBD_Get_USB_Status>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988c:	7bbb      	ldrb	r3, [r7, #14]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	70fb      	strb	r3, [r7, #3]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70bb      	strb	r3, [r7, #2]
 80098ac:	4613      	mov	r3, r2
 80098ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098be:	78bb      	ldrb	r3, [r7, #2]
 80098c0:	883a      	ldrh	r2, [r7, #0]
 80098c2:	78f9      	ldrb	r1, [r7, #3]
 80098c4:	f7f8 faf8 	bl	8001eb8 <HAL_PCD_EP_Open>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f91c 	bl	8009b0c <USBD_Get_USB_Status>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7f8 fb43 	bl	8001f8c <HAL_PCD_EP_Close>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 f8fd 	bl	8009b0c <USBD_Get_USB_Status>
 8009912:	4603      	mov	r3, r0
 8009914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009916:	7bbb      	ldrb	r3, [r7, #14]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7f8 fbfb 	bl	800213a <HAL_PCD_EP_SetStall>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f8de 	bl	8009b0c <USBD_Get_USB_Status>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009954:	7bbb      	ldrb	r3, [r7, #14]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f7f8 fc3f 	bl	8002200 <HAL_PCD_EP_ClrStall>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f8bf 	bl	8009b0c <USBD_Get_USB_Status>
 800998e:	4603      	mov	r3, r0
 8009990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009992:	7bbb      	ldrb	r3, [r7, #14]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da0b      	bge.n	80099d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	4613      	mov	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	3316      	adds	r3, #22
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	e00b      	b.n	80099e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	4613      	mov	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80099e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7f8 fa2c 	bl	8001e70 <HAL_PCD_SetAddress>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 f874 	bl	8009b0c <USBD_Get_USB_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b086      	sub	sp, #24
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a50:	7af9      	ldrb	r1, [r7, #11]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	f7f8 fb36 	bl	80020c6 <HAL_PCD_EP_Transmit>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f853 	bl	8009b0c <USBD_Get_USB_Status>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	460b      	mov	r3, r1
 8009a82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a92:	7af9      	ldrb	r1, [r7, #11]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	f7f8 fac2 	bl	8002020 <HAL_PCD_EP_Receive>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 f832 	bl	8009b0c <USBD_Get_USB_Status>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7f8 fae2 	bl	8002096 <HAL_PCD_EP_GetRxCount>
 8009ad2:	4603      	mov	r3, r0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ae4:	4b03      	ldr	r3, [pc, #12]	@ (8009af4 <USBD_static_malloc+0x18>)
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	24001b70 	.word	0x24001b70

08009af8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d817      	bhi.n	8009b50 <USBD_Get_USB_Status+0x44>
 8009b20:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <USBD_Get_USB_Status+0x1c>)
 8009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b26:	bf00      	nop
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b3f 	.word	0x08009b3f
 8009b30:	08009b45 	.word	0x08009b45
 8009b34:	08009b4b 	.word	0x08009b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	e00b      	b.n	8009b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	73fb      	strb	r3, [r7, #15]
    break;
 8009b42:	e008      	b.n	8009b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b44:	2301      	movs	r3, #1
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	e005      	b.n	8009b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4e:	e002      	b.n	8009b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b50:	2303      	movs	r3, #3
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	bf00      	nop
  }
  return usb_status;
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <memset>:
 8009b64:	4402      	add	r2, r0
 8009b66:	4603      	mov	r3, r0
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d100      	bne.n	8009b6e <memset+0xa>
 8009b6c:	4770      	bx	lr
 8009b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b72:	e7f9      	b.n	8009b68 <memset+0x4>

08009b74 <__libc_init_array>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4d0d      	ldr	r5, [pc, #52]	@ (8009bac <__libc_init_array+0x38>)
 8009b78:	4c0d      	ldr	r4, [pc, #52]	@ (8009bb0 <__libc_init_array+0x3c>)
 8009b7a:	1b64      	subs	r4, r4, r5
 8009b7c:	10a4      	asrs	r4, r4, #2
 8009b7e:	2600      	movs	r6, #0
 8009b80:	42a6      	cmp	r6, r4
 8009b82:	d109      	bne.n	8009b98 <__libc_init_array+0x24>
 8009b84:	4d0b      	ldr	r5, [pc, #44]	@ (8009bb4 <__libc_init_array+0x40>)
 8009b86:	4c0c      	ldr	r4, [pc, #48]	@ (8009bb8 <__libc_init_array+0x44>)
 8009b88:	f000 f818 	bl	8009bbc <_init>
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	2600      	movs	r6, #0
 8009b92:	42a6      	cmp	r6, r4
 8009b94:	d105      	bne.n	8009ba2 <__libc_init_array+0x2e>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9c:	4798      	blx	r3
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7ee      	b.n	8009b80 <__libc_init_array+0xc>
 8009ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba6:	4798      	blx	r3
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7f2      	b.n	8009b92 <__libc_init_array+0x1e>
 8009bac:	08009c2c 	.word	0x08009c2c
 8009bb0:	08009c2c 	.word	0x08009c2c
 8009bb4:	08009c2c 	.word	0x08009c2c
 8009bb8:	08009c30 	.word	0x08009c30

08009bbc <_init>:
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	bf00      	nop
 8009bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc2:	bc08      	pop	{r3}
 8009bc4:	469e      	mov	lr, r3
 8009bc6:	4770      	bx	lr

08009bc8 <_fini>:
 8009bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bca:	bf00      	nop
 8009bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bce:	bc08      	pop	{r3}
 8009bd0:	469e      	mov	lr, r3
 8009bd2:	4770      	bx	lr
